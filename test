mainwindow.xaml.cs

using CsvHelper;
using Microsoft.Office.Core;
using Microsoft.Office.Interop.PowerPoint;
using Microsoft.Win32;
using Ookii.Dialogs.Wpf;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text.RegularExpressions;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;
using System.Windows.Shapes;

namespace WorkInstructionLabeler
{
    public partial class MainWindow : Window
    {
        private List<PowerPointFileInfo> _powerPointFiles = new List<PowerPointFileInfo>();
        private PowerPointFileInfo _currentFile;
        private int _currentSlideIndex = 0;
        private List<LabeledTextBox> _allLabeledBoxes = new List<LabeledTextBox>();
        private LabeledTextBox _selectedTextBox;
        private Dictionary<Border, LabeledTextBox> _borderToTextBoxMap = new Dictionary<Border, LabeledTextBox>();
        private double _zoomLevel = 1.0;

        public MainWindow()
        {
            InitializeComponent();
        }

        private void BtnLoadFolder_Click(object sender, RoutedEventArgs e)
        {
            var dialog = new VistaFolderBrowserDialog
            {
                Description = "Select folder containing PowerPoint work instructions",
                UseDescriptionForTitle = true
            };

            if (dialog.ShowDialog(this) == true)
            {
                LoadPowerPointFiles(dialog.SelectedPath);
            }
        }

        private void LoadPowerPointFiles(string folderPath)
        {
            _powerPointFiles.Clear();
            lstFiles.Items.Clear();

            var files = Directory.GetFiles(folderPath, "*.pptx")
                .Where(f => !System.IO.Path.GetFileName(f).StartsWith("~$"))
                .ToList();

            foreach (var file in files)
            {
                var fileInfo = new PowerPointFileInfo
                {
                    FilePath = file,
                    FileName = System.IO.Path.GetFileName(file),
                    IsLabeled = false,
                    IsCompleted = false
                };

                _powerPointFiles.Add(fileInfo);
                lstFiles.Items.Add(fileInfo);
            }

            UpdateProgress();

            if (_powerPointFiles.Count > 0)
            {
                lstFiles.SelectedIndex = 0;
            }
        }

        private void LstFiles_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (e.RemovedItems.Count > 0 && e.RemovedItems[0] is PowerPointFileInfo previousFile)
            {
                if (!previousFile.IsCompleted)
                {
                    var missingLabels = CheckRequiredLabels();

                    if (missingLabels.Count > 0)
                    {
                        var result = MessageBox.Show(
                            $"You haven't completed labeling the previous file:\n{previousFile.FileName}\n\n" +
                            $"Missing:\n{string.Join("\n", missingLabels)}\n\n" +
                            "Do you want to continue to the next file without completing it?",
                            "Incomplete File",
                            MessageBoxButton.YesNo,
                            MessageBoxImage.Warning);

                        if (result == MessageBoxResult.No)
                        {
                            lstFiles.SelectionChanged -= LstFiles_SelectionChanged;
                            lstFiles.SelectedItem = previousFile;
                            lstFiles.SelectionChanged += LstFiles_SelectionChanged;
                            return;
                        }
                    }
                }
            }

            if (lstFiles.SelectedItem is PowerPointFileInfo fileInfo)
            {
                LoadPowerPointFile(fileInfo);
            }
        }

        private void LoadPowerPointFile(PowerPointFileInfo fileInfo)
        {
            _currentFile = fileInfo;
            _currentSlideIndex = 0;

            txtFileName.Text = fileInfo.FileName;

            ExtractTextBoxesFromPowerPoint(fileInfo.FilePath);

            DisplaySlide(_currentSlideIndex);
        }

        private void ExtractTextBoxesFromPowerPoint(string filePath)
        {
            var pptApp = new Microsoft.Office.Interop.PowerPoint.Application();

            try
            {
                Presentation ppt = pptApp.Presentations.Open(filePath,
                    MsoTriState.msoFalse, MsoTriState.msoFalse, MsoTriState.msoFalse);

                string revType = DetectRevisionType(ppt);

                if (revType == "Unknown")
                {
                    txtRevType.Text = "Template: Unknown";
                    txtRevType.Foreground = new SolidColorBrush(Colors.Orange);
                }
                else
                {
                    txtRevType.Text = $"Template: Rev {revType}";
                    txtRevType.Foreground = new SolidColorBrush(Color.FromRgb(76, 175, 80));
                }

                _allLabeledBoxes.RemoveAll(b => b.SourceFile == filePath);

                _currentFile.TotalSlides = ppt.Slides.Count;

                Console.WriteLine($"\n=== Extracting text boxes from {System.IO.Path.GetFileName(filePath)} ===");
                Console.WriteLine($"Total slides: {ppt.Slides.Count}");

                for (int i = 1; i <= ppt.Slides.Count; i++)
                {
                    Slide slide = ppt.Slides[i];
                    var textBoxes = new List<TextBoxInfo>();

                    Console.WriteLine($"\n--- Slide {i} ---");

                    CollectTextBoxes(slide.Shapes, textBoxes, "Slide");
                    try { CollectTextBoxes(slide.Master.Shapes, textBoxes, "Master"); } catch { }
                    try { CollectTextBoxes(slide.Design.SlideMaster.Shapes, textBoxes, "Design"); } catch { }
                    try { CollectTextBoxes(slide.CustomLayout.Shapes, textBoxes, "CustomLayout"); } catch { }

                    Console.WriteLine($"Slide {i}: Collected {textBoxes.Count} text boxes");

                    var uniqueBoxes = textBoxes
                        .GroupBy(b => new { b.Text, Left = Math.Round(b.Left, 1), Top = Math.Round(b.Top, 1) })
                        .Select(g => g.First())
                        .ToList();

                    Console.WriteLine($"Slide {i}: After deduplication: {uniqueBoxes.Count} unique text boxes");

                    string slideType = _currentFile.SlideTypes.ContainsKey(i)
                        ? _currentFile.SlideTypes[i]
                        : "";

                    foreach (var box in uniqueBoxes)
                    {
                        if (string.IsNullOrWhiteSpace(box.Text))
                            continue;

                        _allLabeledBoxes.Add(new LabeledTextBox
                        {
                            Text = box.Text,
                            Left = box.Left,
                            Top = box.Top,
                            Width = box.Width,
                            Height = box.Height,
                            RevisionType = revType,
                            SourceFile = filePath,
                            SlideNumber = i,
                            AssignedLabel = null,
                            IsHidden = false,
                            SlideType = slideType
                        });
                    }
                }

                txtSlideInfo.Text = $"Slide 1 of {ppt.Slides.Count}";
                UpdateSlideTypeDisplay();

                ppt.Close();
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error loading PowerPoint:\n{ex.Message}", "Error",
                    MessageBoxButton.OK, MessageBoxImage.Error);
            }
            finally
            {
                pptApp.Quit();
            }
        }

        private string DetectRevisionType(Presentation ppt)
        {
            if (ppt.Slides.Count > 0)
            {
                Slide slide = ppt.Slides[1];
                var candidateBoxes = new List<(string text, float left, float top)>();

                void CollectCandidates(Microsoft.Office.Interop.PowerPoint.Shapes shapes, string source)
                {
                    foreach (Microsoft.Office.Interop.PowerPoint.Shape shape in shapes)
                    {
                        try
                        {
                            if (shape.Type == MsoShapeType.msoGroup)
                            {
                                try
                                {
                                    CollectCandidatesFromGroup(shape.GroupItems, source + "-Group");
                                }
                                catch { }
                            }
                            else if (shape.HasTextFrame == MsoTriState.msoTrue)
                            {
                                try
                                {
                                    string text = shape.TextFrame.TextRange.Text.Trim();
                                    if (!string.IsNullOrEmpty(text))
                                    {
                                        candidateBoxes.Add((text, shape.Left, shape.Top));
                                    }
                                }
                                catch { }
                            }
                        }
                        catch { }
                    }
                }

                void CollectCandidatesFromGroup(Microsoft.Office.Interop.PowerPoint.GroupShapes groupShapes, string source)
                {
                    foreach (Microsoft.Office.Interop.PowerPoint.Shape shape in groupShapes)
                    {
                        try
                        {
                            if (shape.Type == MsoShapeType.msoGroup)
                            {
                                try
                                {
                                    CollectCandidatesFromGroup(shape.GroupItems, source + "-Group");
                                }
                                catch { }
                            }
                            else if (shape.HasTextFrame == MsoTriState.msoTrue)
                            {
                                try
                                {
                                    string text = shape.TextFrame.TextRange.Text.Trim();
                                    if (!string.IsNullOrEmpty(text))
                                    {
                                        candidateBoxes.Add((text, shape.Left, shape.Top));
                                    }
                                }
                                catch { }
                            }
                        }
                        catch { }
                    }
                }

                Console.WriteLine("\n=== Searching for Template Revision ===");

                try { CollectCandidates(slide.Shapes, "Slide"); } catch { }
                try { CollectCandidates(slide.Master.Shapes, "Master"); } catch { }
                try { CollectCandidates(slide.Design.SlideMaster.Shapes, "Design"); } catch { }
                try { CollectCandidates(slide.CustomLayout.Shapes, "CustomLayout"); } catch { }

                Console.WriteLine($"\nTotal text boxes found: {candidateBoxes.Count}");

                var bottomRightBoxes = candidateBoxes
                    .Where(b => b.left > 300 && b.top > 450)
                    .OrderByDescending(b => b.left)
                    .ThenByDescending(b => b.top)
                    .ToList();

                var fmmePatterns = new[]
                {
                    @"fm[-_\s]*me[-_\s]*\d+",
                    @"fm[-_\s]*\d+",
                    @"fmme",
                };

                var revPatterns = new[]
                {
                    @"rev\.?\s*(\d+)",
                    @"revision\s*(\d+)",
                    @"r\.?\s*(\d+)",
                    @"-(\d+)$",
                    @"\b(\d{2})\b",
                };

                foreach (var box in bottomRightBoxes)
                {
                    string text = box.text.ToLower();
                    bool hasFMME = fmmePatterns.Any(p => Regex.IsMatch(text, p, RegexOptions.IgnoreCase));


                    if (hasFMME)
                    {
                        foreach (var pattern in revPatterns)
                        {
                            var match = Regex.Match(text, pattern, RegexOptions.IgnoreCase);
                            if (match.Success && match.Groups.Count > 1)
                            {
                                string revNum = match.Groups[1].Value;
                                if (int.TryParse(revNum, out int num) && num >= 10 && num <= 30)
                                {
                                    return revNum;
                                }
                            }
                        }
                    }
                }
            }

            return "Unknown";
        }

        private void CollectTextBoxes(Microsoft.Office.Interop.PowerPoint.Shapes shapes,
            List<TextBoxInfo> textBoxes, string source = "Unknown")
        {
            foreach (Microsoft.Office.Interop.PowerPoint.Shape shape in shapes)
            {
                try
                {
                    if (shape.Type == MsoShapeType.msoGroup)
                    {
                        CollectTextBoxesFromGroup(shape.GroupItems, textBoxes, source);
                    }
                    else if (shape.HasTextFrame == MsoTriState.msoTrue)
                    {
                        try
                        {
                            string text = shape.TextFrame.TextRange.Text.Trim();
                            if (!string.IsNullOrEmpty(text))
                            {
                                textBoxes.Add(new TextBoxInfo
                                {
                                    Text = text,
                                    Left = shape.Left,
                                    Top = shape.Top,
                                    Width = shape.Width,
                                    Height = shape.Height
                                });
                            }
                        }
                        catch { }
                    }
                }
                catch { }
            }
        }

        private void CollectTextBoxesFromGroup(Microsoft.Office.Interop.PowerPoint.GroupShapes groupShapes,
            List<TextBoxInfo> textBoxes, string source = "Unknown")
        {
            foreach (Microsoft.Office.Interop.PowerPoint.Shape shape in groupShapes)
            {
                try
                {
                    if (shape.Type == MsoShapeType.msoGroup)
                    {
                        CollectTextBoxesFromGroup(shape.GroupItems, textBoxes, source);
                    }
                    else if (shape.HasTextFrame == MsoTriState.msoTrue)
                    {
                        try
                        {
                            string text = shape.TextFrame.TextRange.Text.Trim();
                            if (!string.IsNullOrEmpty(text))
                            {
                                textBoxes.Add(new TextBoxInfo
                                {
                                    Text = text,
                                    Left = shape.Left,
                                    Top = shape.Top,
                                    Width = shape.Width,
                                    Height = shape.Height
                                });
                            }
                        }
                        catch { }
                    }
                }
                catch { }
            }
        }

        private bool IsLabel(string upperText)
        {
            var labels = new[] {
            "WORK INSTRUCTION TITLE", "WORK INSTRUCTION", "DESCRIPTION", "DESCRIPTION:",
            "W.I. NUMBER", "WI NUMBER", "BOM/ASSY DWG NO", "BOM DWG NO", "ASSY DWG NO",
            "OPS (OPTIONAL)", "OPERATION NO", "OPERATION NO.", "PRODUCT LINE",
            "SUBJECT", "SUBJECT:", "PAGE", "REV", "REV:", "REVISION", "REVISION:"
        };

            return labels.Any(label => upperText == label || (upperText.Contains(label) && upperText.Length < 40)) ||
                   (upperText.EndsWith(":") && upperText.Length < 25);
        }

        private void DisplaySlide(int slideIndex)
        {
            slideCanvas.Children.Clear();
            _borderToTextBoxMap.Clear();

            var slideBoxes = _allLabeledBoxes
                .Where(b => b.SourceFile == _currentFile.FilePath &&
                            b.SlideNumber == slideIndex + 1 &&
                            !b.IsHidden)
                .ToList();

            Console.WriteLine($"\nDisplaying Slide {slideIndex + 1}: {slideBoxes.Count} text boxes");

            float scaleFactor = 1.0f;

            foreach (var box in slideBoxes)
            {
                var border = new Border
                {
                    Width = Math.Max(box.Width * scaleFactor, 50),
                    Height = Math.Max(box.Height * scaleFactor, 20),
                    Cursor = System.Windows.Input.Cursors.Hand,
                    ToolTip = box.Text
                };

                if (slideIndex == 0)
                {
                    border.Style = GetStyleForLabel(box.AssignedLabel);
                }
                else
                {
                    border.Style = (Style)FindResource("UnlabeledBox");
                }

                var textBlock = new TextBlock
                {
                    Text = box.Text,
                    TextWrapping = TextWrapping.Wrap,
                    Padding = new Thickness(3),
                    FontSize = 9,
                    TextTrimming = TextTrimming.CharacterEllipsis,
                    VerticalAlignment = VerticalAlignment.Center
                };

                border.Child = textBlock;

                Canvas.SetLeft(border, box.Left * scaleFactor);
                Canvas.SetTop(border, box.Top * scaleFactor);

                border.MouseDown += (s, e) =>
                {
                    if (slideIndex == 0)
                    {
                        SelectTextBox(box, border);
                    }
                };

                slideCanvas.Children.Add(border);
                _borderToTextBoxMap[border] = box;
            }

            UpdateSlideTypeDisplay();
        }

        private Style GetStyleForLabel(string label)
        {
            if (string.IsNullOrEmpty(label))
                return (Style)FindResource("UnlabeledBox");

            return label switch
            {
                "WI_Number" => (Style)FindResource("WINumberBox"),
                "WI_Title" => (Style)FindResource("TitleBox"),
                "Revision" => (Style)FindResource("RevisionBox"),
                "BOM_ASSY_DWG_NO" => (Style)FindResource("BOMBox"),
                "Operation_No" => (Style)FindResource("OperationBox"),
                "Product_Line" => (Style)FindResource("ProductLineBox"),
                "Subject" => (Style)FindResource("SubjectBox"),
                "Template_Revision" => (Style)FindResource("TemplateRevisionBox"),
                _ => (Style)FindResource("UnlabeledBox")
            };
        }

        private void SelectTextBox(LabeledTextBox box, Border border)
        {
            _selectedTextBox = box;

            foreach (var kvp in _borderToTextBoxMap)
            {
                if (kvp.Value == box)
                    kvp.Key.BorderThickness = new Thickness(4);
                else
                    kvp.Key.BorderThickness = new Thickness(2);
            }

            txtSelectedText.Text = box.Text;
            txtPosition.Text = $"Left: {box.Left:F1}, Top: {box.Top:F1}, W: {box.Width:F1}, H: {box.Height:F1}";
        }

        private void BtnSlideType_Click(object sender, RoutedEventArgs e)
        {
            if (_currentFile == null)
            {
                MessageBox.Show("Please load a file first", "No File",
                    MessageBoxButton.OK, MessageBoxImage.Warning);
                return;
            }

            var button = sender as Button;
            string slideType = button.Tag.ToString();

            _currentFile.SlideTypes[_currentSlideIndex + 1] = slideType;

            foreach (var box in _allLabeledBoxes.Where(b =>
                b.SourceFile == _currentFile.FilePath &&
                b.SlideNumber == _currentSlideIndex + 1))
            {
                box.SlideType = slideType;
            }

            _currentFile.IsLabeled = true;

            UpdateSlideTypeDisplay();

            Console.WriteLine($"Slide {_currentSlideIndex + 1} classified as: {slideType}");

            if (_currentSlideIndex < _currentFile.TotalSlides - 1)
            {
                _currentSlideIndex++;
                DisplaySlide(_currentSlideIndex);
                txtSlideInfo.Text = $"Slide {_currentSlideIndex + 1} of {_currentFile.TotalSlides}";
            }
            else
            {
                MessageBox.Show("All slides classified! You can now move to text box labeling on Slide 1, or mark this file as complete.",
                    "Slides Complete", MessageBoxButton.OK, MessageBoxImage.Information);
            }
        }

        private void UpdateSlideTypeDisplay()
        {
            if (_currentFile == null)
            {
                txtCurrentSlideType.Text = "No file loaded";
                txtCurrentSlideType.Foreground = new SolidColorBrush(Colors.Gray);
                return;
            }

            int currentSlide = _currentSlideIndex + 1;

            if (_currentFile.SlideTypes.ContainsKey(currentSlide))
            {
                string slideType = _currentFile.SlideTypes[currentSlide];
                txtCurrentSlideType.Text = $"Slide {currentSlide}: {slideType}";
                txtCurrentSlideType.Foreground = new SolidColorBrush(Color.FromRgb(76, 175, 80));
            }
            else
            {
                txtCurrentSlideType.Text = $"Slide {currentSlide}: Not classified";
                txtCurrentSlideType.Foreground = new SolidColorBrush(Colors.Orange);
            }
        }

        private void BtnLabel_Click(object sender, RoutedEventArgs e)
        {
            if (_currentSlideIndex != 0)
            {
                MessageBox.Show("Text box labeling only works on Slide 1 (Title Page)",
                    "Wrong Slide", MessageBoxButton.OK, MessageBoxImage.Warning);
                return;
            }

            if (_selectedTextBox == null)
            {
                MessageBox.Show("Please select a text box first", "No Selection",
                    MessageBoxButton.OK, MessageBoxImage.Warning);
                return;
            }

            var button = sender as Button;
            string label = button.Tag.ToString();

            _selectedTextBox.AssignedLabel = label;

            DisplaySlide(_currentSlideIndex);

            _currentFile.IsLabeled = true;

            CaptureExtractedValue(label, _selectedTextBox.Text);

            UpdateProgress();
        }

        private void CaptureExtractedValue(string label, string value)
        {
            if (_currentFile == null) return;

            switch (label)
            {
                case "WI_Number":
                    _currentFile.ExtractedWINumber = value;
                    break;
                case "WI_Title":
                    _currentFile.ExtractedTitle = value;
                    break;
                case "Revision":
                    _currentFile.ExtractedRevision = value;
                    break;
                case "BOM_ASSY_DWG_NO":
                    _currentFile.ExtractedBOM = value;
                    break;
                case "Operation_No":
                    _currentFile.ExtractedOperationNo = value;
                    break;
                case "Product_Line":
                    _currentFile.ExtractedProductLine = value;
                    break;
                case "Subject":
                    _currentFile.ExtractedSubject = value;
                    break;
                case "Page_No":
                    _currentFile.ExtractedPageNo = ParsePageNumber(value);
                    break;
                case "Template_Revision":
                    _currentFile.ExtractedTemplateRev = ParseTemplateRevision(value);
                    break;
            }

            Console.WriteLine($"Captured: {label} = '{value}'");
        }

        private string ParseTemplateRevision(string templateText)
        {
            if (string.IsNullOrWhiteSpace(templateText))
                return "";

            var revMatch = Regex.Match(templateText,
                @"fm[-_\s]*me[-_\s]*\d+\s*rev\.?\s*(\d+)",
                RegexOptions.IgnoreCase);

            if (revMatch.Success && revMatch.Groups.Count > 1)
            {
                return revMatch.Groups[1].Value;
            }

            revMatch = Regex.Match(templateText, @"rev\.?\s*(\d{1,2})", RegexOptions.IgnoreCase);
            if (revMatch.Success && revMatch.Groups.Count > 1)
            {
                return revMatch.Groups[1].Value;
            }

            revMatch = Regex.Match(templateText, @"\b(\d{2})\b");
            if (revMatch.Success)
            {
                return revMatch.Groups[1].Value;
            }

            return templateText;
        }

        private string ParsePageNumber(string pageText)
        {
            if (string.IsNullOrWhiteSpace(pageText))
                return "";

            var match = Regex.Match(pageText, @"page\s*(\d+)", RegexOptions.IgnoreCase);
            if (match.Success)
                return match.Groups[1].Value;

            match = Regex.Match(pageText, @"(\d+)\s*(?:of|/)\s*\d+", RegexOptions.IgnoreCase);
            if (match.Success)
                return match.Groups[1].Value;

            return pageText;
        }

        private void BtnClearLabel_Click(object sender, RoutedEventArgs e)
        {
            if (_selectedTextBox == null) return;

            string previousLabel = _selectedTextBox.AssignedLabel;
            _selectedTextBox.AssignedLabel = null;

            if (!string.IsNullOrEmpty(previousLabel))
            {
                ClearExtractedValue(previousLabel);
            }

            DisplaySlide(_currentSlideIndex);
        }

        private void ClearExtractedValue(string label)
        {
            if (_currentFile == null) return;

            switch (label)
            {
                case "WI_Number":
                    _currentFile.ExtractedWINumber = null;
                    break;
                case "WI_Title":
                    _currentFile.ExtractedTitle = null;
                    break;
                case "Revision":
                    _currentFile.ExtractedRevision = null;
                    break;
                case "BOM_ASSY_DWG_NO":
                    _currentFile.ExtractedBOM = null;
                    break;
                case "Operation_No":
                    _currentFile.ExtractedOperationNo = null;
                    break;
                case "Product_Line":
                    _currentFile.ExtractedProductLine = null;
                    break;
                case "Subject":
                    _currentFile.ExtractedSubject = null;
                    break;
                case "Page_No":
                    _currentFile.ExtractedPageNo = null;
                    break;
                case "Template_Revision":
                    _currentFile.ExtractedTemplateRev = null;
                    break;
            }
        }

        private void BtnHideBox_Click(object sender, RoutedEventArgs e)
        {
            if (_selectedTextBox == null)
            {
                MessageBox.Show("Please select a text box first", "No Selection",
                    MessageBoxButton.OK, MessageBoxImage.Warning);
                return;
            }

            _selectedTextBox.IsHidden = true;

            DisplaySlide(_currentSlideIndex);

            _selectedTextBox = null;
            txtSelectedText.Text = "Text box hidden";
            txtPosition.Text = "";
        }

        private void BtnPrevSlide_Click(object sender, RoutedEventArgs e)
        {
            if (_currentSlideIndex > 0)
            {
                _currentSlideIndex--;
                DisplaySlide(_currentSlideIndex);
                txtSlideInfo.Text = $"Slide {_currentSlideIndex + 1} of {_currentFile.TotalSlides}";
                UpdateSlideTypeDisplay();
            }
        }

        private void BtnNextSlide_Click(object sender, RoutedEventArgs e)
        {
            if (_currentFile != null && _currentSlideIndex < _currentFile.TotalSlides - 1)
            {
                _currentSlideIndex++;
                DisplaySlide(_currentSlideIndex);
                txtSlideInfo.Text = $"Slide {_currentSlideIndex + 1} of {_currentFile.TotalSlides}";
                UpdateSlideTypeDisplay();
            }
            else
            {
                MessageBox.Show("This is the last slide", "End of Presentation",
                    MessageBoxButton.OK, MessageBoxImage.Information);
            }
        }

        private void BtnZoomIn_Click(object sender, RoutedEventArgs e)
        {
            _zoomLevel = Math.Min(_zoomLevel + 0.25, 3.0);
            ApplyZoom();
        }

        private void BtnZoomOut_Click(object sender, RoutedEventArgs e)
        {
            _zoomLevel = Math.Max(_zoomLevel - 0.25, 0.5);
            ApplyZoom();
        }

        private void BtnZoomFit_Click(object sender, RoutedEventArgs e)
        {
            _zoomLevel = 1.0;
            ApplyZoom();
        }

        private void ApplyZoom()
        {
            var scaleTransform = new ScaleTransform(_zoomLevel, _zoomLevel);
            slideCanvas.LayoutTransform = scaleTransform;
            slideCanvas.Width = 960 * _zoomLevel;
            slideCanvas.Height = 720 * _zoomLevel;
            txtZoom.Text = $"{_zoomLevel * 100:F0}%";
        }

        private void BtnMarkComplete_Click(object sender, RoutedEventArgs e)
        {
            if (_currentFile == null)
            {
                MessageBox.Show("No file is currently loaded.", "No File",
                    MessageBoxButton.OK, MessageBoxImage.Warning);
                return;
            }

            var missingLabels = CheckRequiredLabels();

            if (missingLabels.Count > 0)
            {
                var result = MessageBox.Show(
                    $"The following are incomplete:\n\n{string.Join("\n", missingLabels)}\n\n" +
                    "Do you want to mark this file as complete anyway?",
                    "Missing Labels",
                    MessageBoxButton.YesNo,
                    MessageBoxImage.Warning);

                if (result == MessageBoxResult.No)
                    return;
            }

            _currentFile.IsCompleted = true;
            _currentFile.IsLabeled = true;

            UpdateProgress();

            MessageBox.Show(
                $"✓ File marked as complete!\n\n{_currentFile.FileName}\n\n" +
                "You can now move to the next file.",
                "File Completed",
                MessageBoxButton.OK,
                MessageBoxImage.Information);

            int currentIndex = _powerPointFiles.IndexOf(_currentFile);
            if (currentIndex < _powerPointFiles.Count - 1)
            {
                lstFiles.SelectedIndex = currentIndex + 1;
            }
        }

        private List<string> CheckRequiredLabels()
        {
            var missingLabels = new List<string>();

            int unclassifiedSlides = 0;
            for (int i = 1; i <= _currentFile.TotalSlides; i++)
            {
                if (!_currentFile.SlideTypes.ContainsKey(i))
                {
                    unclassifiedSlides++;
                }
            }

            if (unclassifiedSlides > 0)
            {
                missingLabels.Add($"  • {unclassifiedSlides} slide(s) not classified");
            }

            var requiredLabels = new[]
            {
            "WI_Number",
            "WI_Title",
            "Revision",
            "BOM_ASSY_DWG_NO",
            "Operation_No",
            "Product_Line",
            "Subject",
            "Template_Revision"
        };

            var labeledFields = _allLabeledBoxes
                .Where(b => b.SourceFile == _currentFile.FilePath &&
                           b.SlideNumber == 1 &&
                           !b.IsHidden)
                .Select(b => b.AssignedLabel)
                .Where(l => !string.IsNullOrEmpty(l) && l != "Ignore")
                .Distinct()
                .ToList();

            var labelNameMap = new Dictionary<string, string>
        {
            { "WI_Number", "WI Number" },
            { "WI_Title", "WI Title" },
            { "Revision", "Revision" },
            { "BOM_ASSY_DWG_NO", "BOM/ASSY DWG NO" },
            { "Operation_No", "Operation No" },
            { "Product_Line", "Product Line" },
            { "Subject", "Subject" },
            { "Template_Revision", "Template Revision" }
        };

            foreach (var required in requiredLabels)
            {
                if (!labeledFields.Contains(required))
                {
                    missingLabels.Add("  • " + labelNameMap[required]);
                }
            }

            return missingLabels;
        }

        private void BtnLoadTrainingData_Click(object sender, RoutedEventArgs e)
        {
            var dialog = new OpenFileDialog
            {
                Filter = "CSV Files (*.csv)|*.csv",
                Title = "Select Training Data CSV to Load"
            };

            if (dialog.ShowDialog() == true)
            {
                try
                {
                    LoadTrainingDataFromCSV(dialog.FileName);
                    MessageBox.Show(
                        $"Training data loaded successfully!\n\n" +
                        $"Loaded {_allLabeledBoxes.Count} labeled text boxes",
                        "Success",
                        MessageBoxButton.OK,
                        MessageBoxImage.Information);

                    if (_currentFile != null)
                    {
                        DisplaySlide(_currentSlideIndex);
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show(
                        $"Error loading training data:\n{ex.Message}",
                        "Error",
                        MessageBoxButton.OK,
                        MessageBoxImage.Error);
                }
            }
        }

        private void LoadTrainingDataFromCSV(string filePath)
        {
            _allLabeledBoxes.Clear();
            _powerPointFiles.Clear();

            var fileInfoDict = new Dictionary<string, PowerPointFileInfo>();

            using (var reader = new StreamReader(filePath))
            using (var csv = new CsvReader(reader, CultureInfo.InvariantCulture))
            {
                csv.Read();
                csv.ReadHeader();

                while (csv.Read())
                {
                    try
                    {
                        string fileName = csv.GetField<string>("FileName");
                        string wiNumber = csv.GetField<string>("WI_Number");
                        string wiTitle = csv.GetField<string>("WI_Title");
                        string revision = csv.GetField<string>("Revision");
                        string bom = csv.GetField<string>("BOM_ASSY_DWG_NO");
                        string opNo = csv.GetField<string>("Operation_No");
                        string productLine = csv.GetField<string>("Product_Line");
                        string subject = csv.GetField<string>("Subject");
                        string pageNo = csv.GetField<string>("Page_No");
                        string templateRev = csv.GetField<string>("Template_Rev");
                        int slideNumber = csv.GetField<int>("SlideNumber");
                        string slideType = csv.GetField<string>("SlideType");
                        string textBoxText = csv.GetField<string>("TextBoxText");
                        float left = csv.GetField<float>("Left");
                        float top = csv.GetField<float>("Top");
                        float width = csv.GetField<float>("Width");
                        float height = csv.GetField<float>("Height");
                        string revisionType = csv.GetField<string>("RevisionType");
                        string label = csv.GetField<string>("Label");

                        if (!fileInfoDict.ContainsKey(fileName))
                        {
                            fileInfoDict[fileName] = new PowerPointFileInfo
                            {
                                FileName = fileName,
                                FilePath = "",
                                IsLabeled = true,
                                IsCompleted = true,
                                ExtractedWINumber = wiNumber,
                                ExtractedTitle = wiTitle,
                                ExtractedRevision = revision,
                                ExtractedBOM = bom,
                                ExtractedOperationNo = opNo,
                                ExtractedProductLine = productLine,
                                ExtractedSubject = subject,
                                ExtractedPageNo = pageNo,
                                ExtractedTemplateRev = templateRev
                            };
                        }

                        if (!string.IsNullOrEmpty(slideType) && !fileInfoDict[fileName].SlideTypes.ContainsKey(slideNumber))
                        {
                            fileInfoDict[fileName].SlideTypes[slideNumber] = slideType;
                        }

                        _allLabeledBoxes.Add(new LabeledTextBox
                        {
                            Text = textBoxText,
                            Left = left,
                            Top = top,
                            Width = width,
                            Height = height,
                            RevisionType = revisionType,
                            SourceFile = fileName,
                            SlideNumber = slideNumber,
                            SlideType = slideType,
                            AssignedLabel = label,
                            IsHidden = false
                        });
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Error reading CSV row: {ex.Message}");
                    }
                }
            }

            _powerPointFiles.AddRange(fileInfoDict.Values);

            lstFiles.Items.Clear();
            foreach (var file in _powerPointFiles)
            {
                lstFiles.Items.Add(file);
            }

            UpdateProgress();

            Console.WriteLine($"Loaded {_allLabeledBoxes.Count} labeled boxes from {_powerPointFiles.Count} files");
        }

        private void BtnSaveTrainingData_Click(object sender, RoutedEventArgs e)
        {
            var dialog = new SaveFileDialog
            {
                Filter = "CSV Files (*.csv)|*.csv",
                FileName = "training_data_with_values.csv"
            };

            if (dialog.ShowDialog() == true)
            {
                SaveTrainingDataToCSV(dialog.FileName);

                int filesWithData = _powerPointFiles.Count(f =>
                    !string.IsNullOrEmpty(f.ExtractedWINumber) ||
                    !string.IsNullOrEmpty(f.ExtractedTitle) ||
                    f.SlideTypes.Count > 0);

                int labeledBoxes = _allLabeledBoxes.Count(b =>
                    !string.IsNullOrEmpty(b.AssignedLabel) &&
                    !b.IsHidden &&
                    b.AssignedLabel != "Ignore");

                int classifiedSlides = _allLabeledBoxes.Count(b =>
                    !string.IsNullOrEmpty(b.SlideType));

                MessageBox.Show(
                    $"Training data saved!\n\n" +
                    $"File: {dialog.FileName}\n\n" +
                    $"Files processed: {filesWithData}\n" +
                    $"Text boxes labeled: {labeledBoxes}\n" +
                    $"Slides classified: {classifiedSlides}\n\n" +
                    $"This file contains:\n" +
                    $"• Extracted values (for review)\n" +
                    $"• Slide classifications\n" +
                    $"• Text box positions (for ML)",
                    "Success",
                    MessageBoxButton.OK,
                    MessageBoxImage.Information);
            }
        }

        private void SaveTrainingDataToCSV(string filePath)
        {
            using (var writer = new StreamWriter(filePath))
            {
                writer.WriteLine("FileName,WI_Number,WI_Title,Revision,BOM_ASSY_DWG_NO,Operation_No,Product_Line,Subject,Page_No,Template_Rev,SlideNumber,SlideType,TextBoxText,Left,Top,Width,Height,TextLength,ContainsNumbers,ContainsHyphen,StartsWithWI,IsAllDigits,RevisionType,Label");

                var fileGroups = _allLabeledBoxes
                    .Where(b => (!string.IsNullOrEmpty(b.AssignedLabel) && !b.IsHidden && b.AssignedLabel != "Ignore")
                             || !string.IsNullOrEmpty(b.SlideType))
                    .GroupBy(b => b.SourceFile);

                foreach (var fileGroup in fileGroups)
                {
                    var fileInfo = _powerPointFiles.FirstOrDefault(f => f.FilePath == fileGroup.Key || f.FileName == fileGroup.Key);

                    string fileName = fileInfo?.FileName ?? fileGroup.Key;
                    string wiNumber = fileInfo?.ExtractedWINumber ?? "";
                    string wiTitle = fileInfo?.ExtractedTitle ?? "";
                    string revision = fileInfo?.ExtractedRevision ?? "";
                    string bom = fileInfo?.ExtractedBOM ?? "";
                    string opNo = fileInfo?.ExtractedOperationNo ?? "";
                    string productLine = fileInfo?.ExtractedProductLine ?? "";
                    string subject = fileInfo?.ExtractedSubject ?? "";
                    string pageNo = fileInfo?.ExtractedPageNo ?? "";
                    string templateRev = fileInfo?.ExtractedTemplateRev ?? "";

                    foreach (var box in fileGroup)
                    {
                        string line = string.Join(",",
                            EscapeCSV(fileName),
                            EscapeCSV(wiNumber),
                            EscapeCSV(wiTitle),
                            EscapeCSV(revision),
                            EscapeCSV(bom),
                            EscapeCSV(opNo),
                            EscapeCSV(productLine),
                            EscapeCSV(subject),
                            EscapeCSV(pageNo),
                            EscapeCSV(templateRev),
                            box.SlideNumber.ToString(),
                            EscapeCSV(box.SlideType ?? ""),
                            EscapeCSV(CleanTextForCSV(box.Text)),
                            box.Left.ToString(CultureInfo.InvariantCulture),
                            box.Top.ToString(CultureInfo.InvariantCulture),
                            box.Width.ToString(CultureInfo.InvariantCulture),
                            box.Height.ToString(CultureInfo.InvariantCulture),
                            box.Text.Length.ToString(),
                            Regex.IsMatch(box.Text, @"\d") ? "true" : "false",
                            box.Text.Contains("-") ? "true" : "false",
                            box.Text.StartsWith("WI", StringComparison.OrdinalIgnoreCase) ? "true" : "false",
                            Regex.IsMatch(box.Text, @"^\d+$") ? "true" : "false",
                            EscapeCSV(box.RevisionType),
                            EscapeCSV(box.AssignedLabel ?? "")
                        );

                        writer.WriteLine(line);


                    }
                }
            }


            Console.WriteLine($"Combined training/verification CSV exported with slide types");
        }

        private string CleanTextForCSV(string text)
        {
            if (string.IsNullOrEmpty(text))
                return "";

            text = text.Replace("\r", " ").Replace("\n", " ");
            text = text.Replace("\t", " ");
            text = new string(text.Where(c => !char.IsControl(c) || c == ' ').ToArray());
            text = Regex.Replace(text, @"\s+", " ");

            return text.Trim();
        }

        private string EscapeCSV(string field)
        {
            if (string.IsNullOrEmpty(field))
                return "";

            if (field.Contains(",") || field.Contains("\"") || field.Contains("\n") || field.Contains("\r"))
            {
                return "\"" + field.Replace("\"", "\"\"") + "\"";
            }

            return field;
        }

        private void BtnTrainModel_Click(object sender, RoutedEventArgs e)
        {
            var result = MessageBox.Show(
                "Do you want to use an existing training CSV file?\n\n" +
                "Click 'Yes' to select an existing CSV\n" +
                "Click 'No' to generate a new one from current labels",
                "Training Data Source",
                MessageBoxButton.YesNoCancel,
                MessageBoxImage.Question);

            if (result == MessageBoxResult.Cancel)
                return;

            string trainingFile;

            if (result == MessageBoxResult.Yes)
            {
                var openDialog = new OpenFileDialog
                {
                    Filter = "CSV Files (*.csv)|*.csv",
                    Title = "Select Training Data CSV"
                };

                if (openDialog.ShowDialog() != true)
                    return;

                trainingFile = openDialog.FileName;

                Console.WriteLine($"Using existing CSV: {trainingFile}");
            }
            else
            {
                trainingFile = System.IO.Path.Combine(System.IO.Path.GetTempPath(), "temp_training.csv");
                SaveTrainingDataToCSV(trainingFile);

                int labeledCount = _allLabeledBoxes.Count(b => !string.IsNullOrEmpty(b.AssignedLabel) &&
                                                               !b.IsHidden &&
                                                               b.AssignedLabel != "Ignore");
                if (labeledCount < 20)
                {
                    MessageBox.Show($"Not enough training data. You have {labeledCount} labeled examples.\n" +
                        "Please label at least 20 text boxes before training.",
                        "Insufficient Data", MessageBoxButton.OK, MessageBoxImage.Warning);

                    try { File.Delete(trainingFile); } catch { }
                    return;
                }

                Console.WriteLine($"Generated new CSV: {trainingFile}");
            }

            var saveDialog = new SaveFileDialog
            {
                Filter = "Model Files (*.zip)|*.zip",
                FileName = "wi_extractor_model.zip"
            };

            if (saveDialog.ShowDialog() == true)
            {
                try
                {
                    Console.WriteLine($"Training model...");

                    var trainer = new ModelTrainer();
                    trainer.TrainModel(trainingFile, saveDialog.FileName);

                    MessageBox.Show($"Model trained successfully!\n\n" +
                        $"Model saved to:\n{saveDialog.FileName}\n\n" +
                        "You can now use this model in your PowerPointExtractor.",
                        "Training Complete",
                        MessageBoxButton.OK,
                        MessageBoxImage.Information);

                    Console.WriteLine($"✓ Model saved successfully");
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Error training model:\n{ex.Message}\n\n" +
                        "Check the Output window for details.",
                        "Training Error",
                        MessageBoxButton.OK,
                        MessageBoxImage.Error);

                    Console.WriteLine($"✗ Training error: {ex.Message}");
                    Console.WriteLine($"Stack trace: {ex.StackTrace}");
                }
                finally
                {
                    if (result == MessageBoxResult.No)
                    {
                        try { File.Delete(trainingFile); } catch { }
                    }
                }
            }
        }

        private void UpdateProgress()
        {
            int completed = _powerPointFiles.Count(f => f.IsCompleted);
            int labeled = _powerPointFiles.Count(f => f.IsLabeled);
            int total = _powerPointFiles.Count;

            txtProgress.Text = $"{completed} completed, {labeled} labeled of {total} files";
            progressBar.Maximum = total;
            progressBar.Value = completed;
        }
    }

    // Helper classes
    public class PowerPointFileInfo
    {
        public string FilePath { get; set; }
        public string FileName { get; set; }
        public bool IsLabeled { get; set; }
        public bool IsCompleted { get; set; }

        // Extracted values from slide 1
        public string ExtractedWINumber { get; set; }
        public string ExtractedTitle { get; set; }
        public string ExtractedRevision { get; set; }
        public string ExtractedBOM { get; set; }
        public string ExtractedOperationNo { get; set; }
        public string ExtractedProductLine { get; set; }
        public string ExtractedSubject { get; set; }
        public string ExtractedPageNo { get; set; }
        public string ExtractedTemplateRev { get; set; }

        // Slide type tracking
        public Dictionary<int, string> SlideTypes { get; set; } = new Dictionary<int, string>();
        public int TotalSlides { get; set; }
    }

    public class TextBoxInfo
    {
        public string Text { get; set; }
        public float Left { get; set; }
        public float Top { get; set; }
        public float Width { get; set; }
        public float Height { get; set; }
    }

    public class LabeledTextBox
    {
        public string Text { get; set; }
        public float Left { get; set; }
        public float Top { get; set; }
        public float Width { get; set; }
        public float Height { get; set; }
        public string AssignedLabel { get; set; }
        public string RevisionType { get; set; }
        public string SourceFile { get; set; }
        public int SlideNumber { get; set; }
        public bool IsHidden { get; set; }
        public string SlideType { get; set; }
    }


}
