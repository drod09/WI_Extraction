Perfect! Let’s create a standalone “Revision Sorter” application. Here’s the complete solution:

## **Create New Visual Studio Solution**

1. **File → New → Project**
1. **Windows Forms App (.NET Framework)**
1. **Name:** `WorkInstructionRevisionSorter`
1. **Click Create**

-----

## **File 1: Program.cs**

```csharp
using System;
using System.Windows.Forms;

namespace WorkInstructionRevisionSorter
{
    static class Program
    {
        [STAThread]
        static void Main()
        {
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);
            Application.Run(new MainForm());
        }
    }
}
```

-----

## **File 2: MainForm.cs**

```csharp
using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Windows.Forms;
using Microsoft.Office.Interop.PowerPoint;
using Microsoft.Office.Core;

namespace WorkInstructionRevisionSorter
{
    public partial class MainForm : Form
    {
        public MainForm()
        {
            InitializeComponent();
        }

        private void btnSelectFolder_Click(object sender, EventArgs e)
        {
            using (FolderBrowserDialog folderDialog = new FolderBrowserDialog())
            {
                folderDialog.Description = "Select folder containing PowerPoint files to sort";
                folderDialog.ShowNewFolderButton = false;

                if (folderDialog.ShowDialog() == DialogResult.OK)
                {
                    txtSourceFolder.Text = folderDialog.SelectedPath;
                    LogMessage($"Selected folder: {folderDialog.SelectedPath}");
                    
                    // Count files
                    try
                    {
                        var files = Directory.GetFiles(folderDialog.SelectedPath, "*.pptx", 
                            chkIncludeSubfolders.Checked ? SearchOption.AllDirectories : SearchOption.TopDirectoryOnly)
                            .Where(f => !Path.GetFileName(f).StartsWith("~$"))
                            .ToList();
                        
                        lblFileCount.Text = $"Found {files.Count} PowerPoint files";
                        lblFileCount.ForeColor = files.Count > 0 ? Color.Green : Color.Red;
                    }
                    catch (Exception ex)
                    {
                        lblFileCount.Text = $"Error: {ex.Message}";
                        lblFileCount.ForeColor = Color.Red;
                    }
                }
            }
        }

        private void btnSort_Click(object sender, EventArgs e)
        {
            if (string.IsNullOrWhiteSpace(txtSourceFolder.Text))
            {
                MessageBox.Show("Please select a source folder first.", "No Folder Selected",
                    MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            if (!Directory.Exists(txtSourceFolder.Text))
            {
                MessageBox.Show("The selected folder does not exist.", "Invalid Folder",
                    MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            var result = MessageBox.Show(
                "This will scan all PowerPoint files and sort them by revision type.\n\n" +
                "Files will be COPIED (not moved) to:\n" +
                $"{txtSourceFolder.Text}\\_SortedByRevision\\\n\n" +
                "Original files will NOT be modified.\n\n" +
                "Continue?",
                "Confirm Sorting",
                MessageBoxButtons.YesNo,
                MessageBoxIcon.Question);

            if (result == DialogResult.Yes)
            {
                SortFilesByRevision();
            }
        }

        private void SortFilesByRevision()
        {
            try
            {
                SetUIEnabled(false);
                txtLog.Clear();
                
                string sourceFolder = txtSourceFolder.Text;
                LogMessage("═══════════════════════════════════════════════════════");
                LogMessage("STARTING REVISION SORTING");
                LogMessage("═══════════════════════════════════════════════════════");
                LogMessage($"Source: {sourceFolder}");
                
                // Find all PowerPoint files
                var searchOption = chkIncludeSubfolders.Checked ? SearchOption.AllDirectories : SearchOption.TopDirectoryOnly;
                var pptxFiles = Directory.GetFiles(sourceFolder, "*.pptx", searchOption)
                    .Where(f => !Path.GetFileName(f).StartsWith("~$"))
                    .ToList();

                LogMessage($"Found {pptxFiles.Count} PowerPoint files to process");

                if (pptxFiles.Count == 0)
                {
                    MessageBox.Show("No PowerPoint files found in the selected folder.",
                        "No Files Found", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    SetUIEnabled(true);
                    return;
                }

                // Create output folders
                string outputFolder = Path.Combine(sourceFolder, "_SortedByRevision");
                string rev15_16Folder = Path.Combine(outputFolder, "Rev15-16");
                string rev17_19Folder = Path.Combine(outputFolder, "Rev17-19");
                string unknownFolder = Path.Combine(outputFolder, "Unknown");

                Directory.CreateDirectory(rev15_16Folder);
                Directory.CreateDirectory(rev17_19Folder);
                Directory.CreateDirectory(unknownFolder);

                LogMessage($"Created output folder: {outputFolder}");
                LogMessage("");

                // Track statistics
                int rev15_16Count = 0;
                int rev17_19Count = 0;
                int unknownCount = 0;
                int errorCount = 0;
                var revisionDetails = new List<FileRevisionInfo>();

                progressBar.Maximum = pptxFiles.Count;
                progressBar.Value = 0;

                // Process each file
                foreach (var filePath in pptxFiles)
                {
                    try
                    {
                        string fileName = Path.GetFileName(filePath);
                        LogMessage($"Processing: {fileName}");

                        // Detect revision type
                        var fileInfo = DetectFileRevisionType(filePath);
                        
                        string destinationFolder;
                        string revisionLabel;

                        if (fileInfo.RevisionType == "15" || fileInfo.RevisionType == "16")
                        {
                            destinationFolder = rev15_16Folder;
                            revisionLabel = $"Rev {fileInfo.RevisionType}";
                            rev15_16Count++;
                        }
                        else if (fileInfo.RevisionType == "17" || fileInfo.RevisionType == "18" || fileInfo.RevisionType == "19")
                        {
                            destinationFolder = rev17_19Folder;
                            revisionLabel = $"Rev {fileInfo.RevisionType}";
                            rev17_19Count++;
                        }
                        else
                        {
                            destinationFolder = unknownFolder;
                            revisionLabel = "Unknown";
                            unknownCount++;
                        }

                        // Copy file to destination
                        string destinationPath = Path.Combine(destinationFolder, fileName);
                        
                        // Handle duplicate filenames
                        int counter = 1;
                        while (File.Exists(destinationPath))
                        {
                            string fileNameWithoutExt = Path.GetFileNameWithoutExtension(fileName);
                            string extension = Path.GetExtension(fileName);
                            destinationPath = Path.Combine(destinationFolder, 
                                $"{fileNameWithoutExt}_{counter}{extension}");
                            counter++;
                        }

                        File.Copy(filePath, destinationPath, false);

                        string wiDisplay = string.IsNullOrEmpty(fileInfo.WINumber) ? "[No WI]" : fileInfo.WINumber;
                        LogMessage($"  → {revisionLabel,-12} WI: {wiDisplay,-15} ✓", Color.Green);
                        
                        fileInfo.FileName = fileName;
                        fileInfo.RevisionLabel = revisionLabel;
                        revisionDetails.Add(fileInfo);
                    }
                    catch (Exception ex)
                    {
                        LogMessage($"  ✗ Error: {ex.Message}", Color.Red);
                        errorCount++;
                    }

                    progressBar.Value++;
                    System.Windows.Forms.Application.DoEvents();
                }

                LogMessage("");
                LogMessage("═══════════════════════════════════════════════════════");

                // Create summary report
                CreateSortingSummaryReport(outputFolder, revisionDetails, 
                    rev15_16Count, rev17_19Count, unknownCount, errorCount);

                SetUIEnabled(true);

                // Update statistics display
                lblRev15_16Count.Text = rev15_16Count.ToString();
                lblRev17_19Count.Text = rev17_19Count.ToString();
                lblUnknownCount.Text = unknownCount.ToString();
                lblErrorCount.Text = errorCount.ToString();
                lblErrorCount.ForeColor = errorCount > 0 ? Color.Red : Color.Green;

                // Show summary
                string summary = $"Sorting complete!\n\n" +
                                $"Rev 15-16: {rev15_16Count} files\n" +
                                $"Rev 17-19: {rev17_19Count} files\n" +
                                $"Unknown:   {unknownCount} files\n" +
                                $"Errors:    {errorCount} files\n\n" +
                                $"Output folder:\n{outputFolder}";

                LogMessage($"SUMMARY: Rev15-16={rev15_16Count}, Rev17-19={rev17_19Count}, Unknown={unknownCount}, Errors={errorCount}", 
                    Color.Blue);
                LogMessage("═══════════════════════════════════════════════════════");

                MessageBox.Show(summary, "Sorting Complete", 
                    MessageBoxButtons.OK, MessageBoxIcon.Information);

                // Ask to open folder
                var openResult = MessageBox.Show("Would you like to open the output folder?",
                    "Open Folder", MessageBoxButtons.YesNo, MessageBoxIcon.Question);

                if (openResult == DialogResult.Yes)
                {
                    System.Diagnostics.Process.Start("explorer.exe", outputFolder);
                }
            }
            catch (Exception ex)
            {
                SetUIEnabled(true);
                LogMessage($"✗ Fatal error: {ex.Message}", Color.Red);
                MessageBox.Show($"An error occurred:\n\n{ex.Message}",
                    "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private FileRevisionInfo DetectFileRevisionType(string filePath)
        {
            Microsoft.Office.Interop.PowerPoint.Application pptApp = null;
            Presentation ppt = null;

            try
            {
                pptApp = new Microsoft.Office.Interop.PowerPoint.Application();
                ppt = pptApp.Presentations.Open(filePath,
                    MsoTriState.msoFalse, MsoTriState.msoFalse, MsoTriState.msoFalse);

                if (ppt.Slides.Count > 0)
                {
                    var firstSlide = ppt.Slides[1];
                    
                    // Collect all text from various sources
                    var allText = new List<string>();
                    CollectText(firstSlide.Shapes, allText);
                    try { CollectText(firstSlide.Master.Shapes, allText); } catch { }
                    try { CollectText(firstSlide.Design.SlideMaster.Shapes, allText); } catch { }
                    try { CollectText(firstSlide.CustomLayout.Shapes, allText); } catch { }

                    // Detect revision type
                    string revisionType = DetectRevisionType(allText);
                    
                    // Extract WI Number
                    string wiNumber = ExtractWINumber(allText);

                    return new FileRevisionInfo
                    {
                        RevisionType = revisionType,
                        WINumber = wiNumber
                    };
                }

                return new FileRevisionInfo { RevisionType = "Unknown", WINumber = "" };
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error detecting revision: {ex.Message}");
                return new FileRevisionInfo { RevisionType = "Unknown", WINumber = "" };
            }
            finally
            {
                if (ppt != null)
                {
                    try { ppt.Close(); } catch { }
                }
                if (pptApp != null)
                {
                    try { pptApp.Quit(); } catch { }
                }
            }
        }

        private void CollectText(Microsoft.Office.Interop.PowerPoint.Shapes shapes, List<string> texts)
        {
            foreach (Microsoft.Office.Interop.PowerPoint.Shape shape in shapes)
            {
                try
                {
                    if (shape.Type == MsoShapeType.msoGroup)
                    {
                        CollectText(shape.GroupItems, texts);
                    }
                    else if (shape.HasTextFrame == MsoTriState.msoTrue)
                    {
                        string text = shape.TextFrame.TextRange.Text.Trim();
                        if (!string.IsNullOrEmpty(text))
                        {
                            texts.Add(text);
                        }
                    }
                }
                catch { }
            }
        }

        private void CollectText(GroupShapes groupShapes, List<string> texts)
        {
            foreach (Microsoft.Office.Interop.PowerPoint.Shape shape in groupShapes)
            {
                try
                {
                    if (shape.Type == MsoShapeType.msoGroup)
                    {
                        CollectText(shape.GroupItems, texts);
                    }
                    else if (shape.HasTextFrame == MsoTriState.msoTrue)
                    {
                        string text = shape.TextFrame.TextRange.Text.Trim();
                        if (!string.IsNullOrEmpty(text))
                        {
                            texts.Add(text);
                        }
                    }
                }
                catch { }
            }
        }

        private string DetectRevisionType(List<string> texts)
        {
            foreach (var text in texts)
            {
                string upper = text.ToUpper();
                if (upper.Contains("FM-ME") || upper.Contains("FM ME") || upper.Contains("FMME"))
                {
                    var match = System.Text.RegularExpressions.Regex.Match(text,
                        @"rev\.?\s*(\d+)",
                        System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                    
                    if (match.Success && match.Groups.Count > 1)
                    {
                        return match.Groups[1].Value;
                    }
                }
            }
            return "Unknown";
        }

        private string ExtractWINumber(List<string> texts)
        {
            foreach (var text in texts)
            {
                var wiMatch = System.Text.RegularExpressions.Regex.Match(text,
                    @"W\.?\s*I\.?\s*-?\s*\d{2,}",
                    System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                
                if (wiMatch.Success)
                {
                    string wiNum = wiMatch.Value.Replace(" ", "").Replace(".", "").ToUpper();
                    if (!wiNum.Contains("-"))
                        wiNum = wiNum.Replace("WI", "WI-");
                    return wiNum;
                }
            }
            return "";
        }

        private void CreateSortingSummaryReport(string outputFolder, 
            List<FileRevisionInfo> details,
            int rev15_16Count, int rev17_19Count, int unknownCount, int errorCount)
        {
            try
            {
                string reportPath = Path.Combine(outputFolder, "Sorting_Summary.txt");
                
                using (StreamWriter writer = new StreamWriter(reportPath))
                {
                    writer.WriteLine("═══════════════════════════════════════════════════════════");
                    writer.WriteLine("        WORK INSTRUCTION REVISION SORTING REPORT");
                    writer.WriteLine("═══════════════════════════════════════════════════════════");
                    writer.WriteLine($"Date: {DateTime.Now:yyyy-MM-dd HH:mm:ss}");
                    writer.WriteLine($"Total Files Processed: {details.Count + errorCount}");
                    writer.WriteLine();
                    writer.WriteLine("SUMMARY:");
                    writer.WriteLine($"  Rev 15-16:  {rev15_16Count} files");
                    writer.WriteLine($"  Rev 17-19:  {rev17_19Count} files");
                    writer.WriteLine($"  Unknown:    {unknownCount} files");
                    writer.WriteLine($"  Errors:     {errorCount} files");
                    writer.WriteLine();
                    writer.WriteLine("═══════════════════════════════════════════════════════════");
                    writer.WriteLine();
                    writer.WriteLine("DETAILED FILE LIST:");
                    writer.WriteLine();

                    // Sort by revision type, then by WI number
                    var sortedDetails = details
                        .OrderBy(d => d.RevisionLabel)
                        .ThenBy(d => d.WINumber)
                        .ToList();

                    string currentRevision = "";
                    foreach (var info in sortedDetails)
                    {
                        if (info.RevisionLabel != currentRevision)
                        {
                            currentRevision = info.RevisionLabel;
                            writer.WriteLine();
                            writer.WriteLine($"─── {currentRevision} ─────────────────────────────────────────────");
                        }
                        
                        string wiDisplay = string.IsNullOrEmpty(info.WINumber) ? "[No WI Number]" : info.WINumber;
                        writer.WriteLine($"  {wiDisplay,-15} {info.FileName}");
                    }

                    writer.WriteLine();
                    writer.WriteLine("═══════════════════════════════════════════════════════════");
                    writer.WriteLine("End of Report");
                }

                LogMessage($"✓ Summary report created: Sorting_Summary.txt", Color.Green);
            }
            catch (Exception ex)
            {
                LogMessage($"⚠ Warning: Could not create summary report: {ex.Message}", Color.Orange);
            }
        }

        private void SetUIEnabled(bool enabled)
        {
            btnSelectFolder.Enabled = enabled;
            btnSort.Enabled = enabled;
            chkIncludeSubfolders.Enabled = enabled;
            txtSourceFolder.ReadOnly = !enabled;
        }

        private void LogMessage(string message, Color? color = null)
        {
            if (txtLog.InvokeRequired)
            {
                txtLog.Invoke(new Action(() => LogMessage(message, color)));
                return;
            }

            txtLog.SelectionStart = txtLog.TextLength;
            txtLog.SelectionLength = 0;
            txtLog.SelectionColor = color ?? Color.Black;
            txtLog.AppendText($"[{DateTime.Now:HH:mm:ss}] {message}\n");
            txtLog.SelectionColor = txtLog.ForeColor;
            txtLog.ScrollToCaret();
        }

        private void MainForm_Load(object sender, EventArgs e)
        {
            LogMessage("Work Instruction Revision Sorter ready.");
            LogMessage("Select a folder to begin sorting PowerPoint files by revision type.");
        }

        private void chkIncludeSubfolders_CheckedChanged(object sender, EventArgs e)
        {
            if (!string.IsNullOrWhiteSpace(txtSourceFolder.Text) && Directory.Exists(txtSourceFolder.Text))
            {
                // Recount files
                try
                {
                    var files = Directory.GetFiles(txtSourceFolder.Text, "*.pptx", 
                        chkIncludeSubfolders.Checked ? SearchOption.AllDirectories : SearchOption.TopDirectoryOnly)
                        .Where(f => !Path.GetFileName(f).StartsWith("~$"))
                        .ToList();
                    
                    lblFileCount.Text = $"Found {files.Count} PowerPoint files";
                    lblFileCount.ForeColor = files.Count > 0 ? Color.Green : Color.Red;
                }
                catch { }
            }
        }
    }

    public class FileRevisionInfo
    {
        public string FileName { get; set; }
        public string RevisionType { get; set; }
        public string RevisionLabel { get; set; }
        public string WINumber { get; set; }
    }
}
```

-----

## **File 3: MainForm.Designer.cs**

```csharp
namespace WorkInstructionRevisionSorter
{
    partial class MainForm
    {
        private System.ComponentModel.IContainer components = null;

        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        private void InitializeComponent()
        {
            this.groupBox1 = new System.Windows.Forms.GroupBox();
            this.lblFileCount = new System.Windows.Forms.Label();
            this.chkIncludeSubfolders = new System.Windows.Forms.CheckBox();
            this.btnSelectFolder = new System.Windows.Forms.Button();
            this.txtSourceFolder = new System.Windows.Forms.TextBox();
            this.label1 = new System.Windows.Forms.Label();
            this.btnSort = new System.Windows.Forms.Button();
            this.progressBar = new System.Windows.Forms.ProgressBar();
            this.groupBox2 = new System.Windows.Forms.GroupBox();
            this.txtLog = new System.Windows.Forms.RichTextBox();
            this.label2 = new System.Windows.Forms.Label();
            this.groupBox3 = new System.Windows.Forms.GroupBox();
            this.lblErrorCount = new System.Windows.Forms.Label();
            this.lblUnknownCount = new System.Windows.Forms.Label();
            this.lblRev17_19Count = new System.Windows.Forms.Label();
            this.lblRev15_16Count = new System.Windows.Forms.Label();
            this.label7 = new System.Windows.Forms.Label();
            this.label6 = new System.Windows.Forms.Label();
            this.label5 = new System.Windows.Forms.Label();
            this.label4 = new System.Windows.Forms.Label();
            this.groupBox1.SuspendLayout();
            this.groupBox2.SuspendLayout();
            this.groupBox3.SuspendLayout();
            this.SuspendLayout();
            // 
            // groupBox1
            // 
            this.groupBox1.Controls.Add(this.lblFileCount);
            this.groupBox1.Controls.Add(this.chkIncludeSubfolders);
            this.groupBox1.Controls.Add(this.btnSelectFolder);
            this.groupBox1.Controls.Add(this.txtSourceFolder);
            this.groupBox1.Controls.Add(this.label1);
            this.groupBox1.Location = new System.Drawing.Point(20, 80);
            this.groupBox1.Name = "groupBox1";
            this.groupBox1.Size = new System.Drawing.Size(840, 130);
            this.groupBox1.TabIndex = 0;
            this.groupBox1.TabStop = false;
            this.groupBox1.Text = "Source Folder";
            // 
            // lblFileCount
            // 
            this.lblFileCount.AutoSize = true;
            this.lblFileCount.Font = new System.Drawing.Font("Segoe UI", 9F, System.Drawing.FontStyle.Bold);
            this.lblFileCount.Location = new System.Drawing.Point(20, 95);
            this.lblFileCount.Name = "lblFileCount";
            this.lblFileCount.Size = new System.Drawing.Size(0, 20);
            this.lblFileCount.TabIndex = 4;
            // 
            // chkIncludeSubfolders
            // 
            this.chkIncludeSubfolders.AutoSize = true;
            this.chkIncludeSubfolders.Checked = true;
            this.chkIncludeSubfolders.CheckState = System.Windows.Forms.CheckState.Checked;
            this.chkIncludeSubfolders.Location = new System.Drawing.Point(24, 65);
            this.chkIncludeSubfolders.Name = "chkIncludeSubfolders";
            this.chkIncludeSubfolders.Size = new System.Drawing.Size(151, 20);
            this.chkIncludeSubfolders.TabIndex = 3;
            this.chkIncludeSubfolders.Text = "Include Subfolders";
            this.chkIncludeSubfolders.UseVisualStyleBackColor = true;
            this.chkIncludeSubfolders.CheckedChanged += new System.EventHandler(this.chkIncludeSubfolders_CheckedChanged);
            // 
            // btnSelectFolder
            // 
            this.btnSelectFolder.Location = new System.Drawing.Point(720, 28);
            this.btnSelectFolder.Name = "btnSelectFolder";
            this.btnSelectFolder.Size = new System.Drawing.Size(100, 26);
            this.btnSelectFolder.TabIndex = 2;
            this.btnSelectFolder.Text = "Browse...";
            this.btnSelectFolder.UseVisualStyleBackColor = true;
            this.btnSelectFolder.Click += new System.EventHandler(this.btnSelectFolder_Click);
            // 
            // txtSourceFolder
            // 
            this.txtSourceFolder.Location = new System.Drawing.Point(120, 30);
            this.txtSourceFolder.Name = "txtSourceFolder";
            this.txtSourceFolder.ReadOnly = true;
            this.txtSourceFolder.Size = new System.Drawing.Size(580, 22);
            this.txtSourceFolder.TabIndex = 1;
            // 
            // label1
            // 
            this.label1.AutoSize = true;
            this.label1.Location = new System.Drawing.Point(20, 33);
            this.label1.Name = "label1";
            this.label1.Size = new System.Drawing.Size(52, 16);
            this.label1.TabIndex = 0;
            this.label1.Text = "Folder:";
            // 
            // btnSort
            // 
            this.btnSort.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0)))), ((int)(((byte)(120)))), ((int)(((byte)(215)))));
            this.btnSort.FlatAppearance.BorderSize = 0;
            this.btnSort.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
            this.btnSort.Font = new System.Drawing.Font("Segoe UI", 12F, System.Drawing.FontStyle.Bold);
            this.btnSort.ForeColor = System.Drawing.Color.White;
            this.btnSort.Location = new System.Drawing.Point(20, 230);
            this.btnSort.Name = "btnSort";
            this.btnSort.Size = new System.Drawing.Size(200, 50);
            this.btnSort.TabIndex = 1;
            this.btnSort.Text = "Sort Files";
            this.btnSort.UseVisualStyleBackColor = false;
            this.btnSort.Click += new System.EventHandler(this.btnSort_Click);
            // 
            // progressBar
            // 
            this.progressBar.Location = new System.Drawing.Point(240, 240);
            this.progressBar.Name = "progressBar";
            this.progressBar.Size = new System.Drawing.Size(400, 30);
            this.progressBar.TabIndex = 2;
            // 
            // groupBox2
            // 
            this.groupBox2.Controls.Add(this.txtLog);
            this.groupBox2.Location = new System.Drawing.Point(20, 300);
            this.groupBox2.Name = "groupBox2";
            this.groupBox2.Size = new System.Drawing.Size(620, 280);
            this.groupBox2.TabIndex = 3;
            this.groupBox2.TabStop = false;
            this.groupBox2.Text = "Activity Log";
            // 
            // txtLog
            // 
            this.txtLog.BackColor = System.Drawing.Color.White;
            this.txtLog.Dock = System.Windows.Forms.DockStyle.Fill;
            this.txtLog.Font = new System.Drawing.Font("Consolas", 9F);
            this.txtLog.Location = new System.Drawing.Point(3, 18);
            this.txtLog.Name = "txtLog";
            this.txtLog.ReadOnly = true;
            this.txtLog.Size = new System.Drawing.Size(614, 259);
            this.txtLog.TabIndex = 0;
            this.txtLog.Text = "";
            // 
            // label2
            // 
            this.label2.Font = new System.Drawing.Font("Segoe UI", 16F, System.Drawing.FontStyle.Bold);
            this.label2.Location = new System.Drawing.Point(20, 20);
            this.label2.Name = "label2";
            this.label2.Size = new System.Drawing.Size(840, 40);
            this.label2.TabIndex = 4;
            this.label2.Text = "Work Instruction Revision Sorter";
            this.label2.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
            // 
            // groupBox3
            // 
            this.groupBox3.Controls.Add(this.lblErrorCount);
            this.groupBox3.Controls.Add(this.lblUnknownCount);
            this.groupBox3.Controls.Add(this.lblRev17_19Count);
            this.groupBox3.Controls.Add(this.lblRev15_16Count);
            this.groupBox3.Controls.Add(this.label7);
            this.groupBox3.Controls.Add(this.label6);
            this.groupBox3.Controls.Add(this.label5);
            this.groupBox3.Controls.Add(this.label4);
            this.groupBox3.Location = new System.Drawing.Point(660, 300);
            this.groupBox3.Name = "groupBox3";
            this.groupBox3.Size = new System.Drawing.Size(200, 180);
            this.groupBox3.TabIndex = 5;
            this.groupBox3.TabStop = false;
            this.groupBox3.Text = "Statistics";
            // 
            // lblErrorCount
            // 
            this.lblErrorCount.Font = new System.Drawing.Font("Segoe UI", 12F, System.Drawing.FontStyle.Bold);
            this.lblErrorCount.ForeColor = System.Drawing.Color.Green;
            this.lblErrorCount.Location = new System.Drawing.Point(120, 130);
            this.lblErrorCount.Name = "lblErrorCount";
            this.lblErrorCount.Size = new System.Drawing.Size(60, 25);
            this.lblErrorCount.TabIndex = 7;
            this.lblErrorCount.Text = "0";
            this.lblErrorCount.TextAlign = System.Drawing.ContentAlignment.MiddleRight;
            // 
            // lblUnknownCount
            // 
            this.lblUnknownCount.Font = new System.Drawing.Font("Segoe UI", 12F, System.Drawing.FontStyle.Bold);
            this.lblUnknownCount.Location = new System.Drawing.Point(120, 95);
            this.lblUnknownCount.Name = "lblUnknownCount";
            this.lblUnknownCount.Size = new System.Drawing.Size(60, 25);
            this.lblUn​​​​​​​​​​​​​​​​
```
---------
```csharp
            this.lblUnknownCount.TabIndex = 6;
            this.lblUnknownCount.Text = "0";
            this.lblUnknownCount.TextAlign = System.Drawing.ContentAlignment.MiddleRight;
            // 
            // lblRev17_19Count
            // 
            this.lblRev17_19Count.Font = new System.Drawing.Font("Segoe UI", 12F, System.Drawing.FontStyle.Bold);
            this.lblRev17_19Count.Location = new System.Drawing.Point(120, 60);
            this.lblRev17_19Count.Name = "lblRev17_19Count";
            this.lblRev17_19Count.Size = new System.Drawing.Size(60, 25);
            this.lblRev17_19Count.TabIndex = 5;
            this.lblRev17_19Count.Text = "0";
            this.lblRev17_19Count.TextAlign = System.Drawing.ContentAlignment.MiddleRight;
            // 
            // lblRev15_16Count
            // 
            this.lblRev15_16Count.Font = new System.Drawing.Font("Segoe UI", 12F, System.Drawing.FontStyle.Bold);
            this.lblRev15_16Count.Location = new System.Drawing.Point(120, 25);
            this.lblRev15_16Count.Name = "lblRev15_16Count";
            this.lblRev15_16Count.Size = new System.Drawing.Size(60, 25);
            this.lblRev15_16Count.TabIndex = 4;
            this.lblRev15_16Count.Text = "0";
            this.lblRev15_16Count.TextAlign = System.Drawing.ContentAlignment.MiddleRight;
            // 
            // label7
            // 
            this.label7.AutoSize = true;
            this.label7.Location = new System.Drawing.Point(20, 135);
            this.label7.Name = "label7";
            this.label7.Size = new System.Drawing.Size(52, 16);
            this.label7.TabIndex = 3;
            this.label7.Text = "Errors:";
            // 
            // label6
            // 
            this.label6.AutoSize = true;
            this.label6.Location = new System.Drawing.Point(20, 100);
            this.label6.Name = "label6";
            this.label6.Size = new System.Drawing.Size(72, 16);
            this.label6.TabIndex = 2;
            this.label6.Text = "Unknown:";
            // 
            // label5
            // 
            this.label5.AutoSize = true;
            this.label5.Location = new System.Drawing.Point(20, 65);
            this.label5.Name = "label5";
            this.label5.Size = new System.Drawing.Size(73, 16);
            this.label5.TabIndex = 1;
            this.label5.Text = "Rev 17-19:";
            // 
            // label4
            // 
            this.label4.AutoSize = true;
            this.label4.Location = new System.Drawing.Point(20, 30);
            this.label4.Name = "label4";
            this.label4.Size = new System.Drawing.Size(73, 16);
            this.label4.TabIndex = 0;
            this.label4.Text = "Rev 15-16:";
            // 
            // MainForm
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(880, 600);
            this.Controls.Add(this.groupBox3);
            this.Controls.Add(this.label2);
            this.Controls.Add(this.groupBox2);
            this.Controls.Add(this.progressBar);
            this.Controls.Add(this.btnSort);
            this.Controls.Add(this.groupBox1);
            this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedSingle;
            this.MaximizeBox = false;
            this.Name = "MainForm";
            this.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
            this.Text = "Work Instruction Revision Sorter";
            this.Load += new System.EventHandler(this.MainForm_Load);
            this.groupBox1.ResumeLayout(false);
            this.groupBox1.PerformLayout();
            this.groupBox2.ResumeLayout(false);
            this.groupBox3.ResumeLayout(false);
            this.groupBox3.PerformLayout();
            this.ResumeLayout(false);

        }

        #endregion

        private System.Windows.Forms.GroupBox groupBox1;
        private System.Windows.Forms.CheckBox chkIncludeSubfolders;
        private System.Windows.Forms.Button btnSelectFolder;
        private System.Windows.Forms.TextBox txtSourceFolder;
        private System.Windows.Forms.Label label1;
        private System.Windows.Forms.Button btnSort;
        private System.Windows.Forms.ProgressBar progressBar;
        private System.Windows.Forms.GroupBox groupBox2;
        private System.Windows.Forms.RichTextBox txtLog;
        private System.Windows.Forms.Label label2;
        private System.Windows.Forms.GroupBox groupBox3;
        private System.Windows.Forms.Label lblErrorCount;
        private System.Windows.Forms.Label lblUnknownCount;
        private System.Windows.Forms.Label lblRev17_19Count;
        private System.Windows.Forms.Label lblRev15_16Count;
        private System.Windows.Forms.Label label7;
        private System.Windows.Forms.Label label6;
        private System.Windows.Forms.Label label5;
        private System.Windows.Forms.Label label4;
        private System.Windows.Forms.Label lblFileCount;
    }
}
```

-----

## **Required References**

Add these COM references to your project:

1. Right-click **References** → **Add Reference**
1. Go to **COM** tab
1. Add:

- **Microsoft PowerPoint 16.0 Object Library** (or your Office version)
- **Microsoft Office 16.0 Object Library**

-----

## **What This Standalone Application Does:**

### **Features:**

1. ✅ **Select Source Folder** - Browse to folder containing PowerPoint files
1. ✅ **Include Subfolders** - Option to scan recursively
1. ✅ **Live File Count** - Shows how many .pptx files are found
1. ✅ **Sort by Revision** - Automatically detects FM-ME revision and sorts files
1. ✅ **Progress Tracking** - Visual progress bar and detailed activity log
1. ✅ **Statistics Dashboard** - Real-time counters for each revision type
1. ✅ **Summary Report** - Creates text file with full details
1. ✅ **Safe Operation** - Copies files, never modifies originals

### **Output Structure:**

```
SourceFolder/
└── _SortedByRevision/
    ├── Rev15-16/
    │   ├── WI-1234.pptx
    │   └── WI-1235.pptx
    ├── Rev17-19/
    │   ├── WI-5678.pptx
    │   └── WI-5679.pptx
    ├── Unknown/
    │   └── WI-9999.pptx (no revision detected)
    └── Sorting_Summary.txt
```

### **Summary Report Example:**

```
═══════════════════════════════════════════════════════════
        WORK INSTRUCTION REVISION SORTING REPORT
═══════════════════════════════════════════════════════════
Date: 2025-01-20 14:30:45
Total Files Processed: 300

SUMMARY:
  Rev 15-16:  145 files
  Rev 17-19:  152 files
  Unknown:    3 files
  Errors:     0 files

═══════════════════════════════════════════════════════════

DETAILED FILE LIST:

─── Rev 15 ─────────────────────────────────────────────
  WI-1001        Work_Instruction_Assembly.pptx
  WI-1002        Work_Instruction_Testing.pptx
  ...

─── Rev 17 ─────────────────────────────────────────────
  WI-2001        Work_Instruction_Packaging.pptx
  WI-2002        Work_Instruction_Inspection.pptx
  ...
```

-----

## **How to Build and Run:**

1. **Create the project** in Visual Studio
1. **Copy all 3 code files** above
1. **Add COM references** (PowerPoint Interop)
1. **Build** (Ctrl+Shift+B)
1. **Run** (F5)

The application is now completely standalone and ready to sort your 300 work instructions!

Would you like me to add any additional features like:

- Export statistics to Excel?
- Filter by WI number patterns?
- Rename files during sorting?
- Create separate folders for each revision (15, 16, 17, 18, 19)?​​​​​​​​​​​​​​​​



