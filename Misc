Great idea! Let’s add a label button for the template revision. Here are the changes:

## **Step 1: Add the Button to MainWindow.xaml**

Find the label buttons section in the right panel and add the new button after the Subject button:

```xml
<!-- Label Buttons -->
<ScrollViewer Grid.Row="1" VerticalScrollBarVisibility="Auto">
    <StackPanel Margin="10,0,10,10">
        <Button x:Name="btnLabelWI" Content="WI Number" Click="BtnLabel_Click" Tag="WI_Number"
                Height="50" Margin="0,0,0,10" Background="#2196F3" Foreground="White" 
                FontSize="14" FontWeight="Bold"/>
        
        <Button x:Name="btnLabelTitle" Content="WI Title" Click="BtnLabel_Click" Tag="WI_Title"
                Height="50" Margin="0,0,0,10" Background="#4CAF50" Foreground="White" 
                FontSize="14" FontWeight="Bold"/>
        
        <Button x:Name="btnLabelRevision" Content="Revision" Click="BtnLabel_Click" Tag="Revision"
                Height="50" Margin="0,0,0,10" Background="#FF9800" Foreground="White" 
                FontSize="14" FontWeight="Bold"/>
        
        <Button x:Name="btnLabelBOM" Content="BOM/ASSY DWG NO" Click="BtnLabel_Click" Tag="BOM_ASSY_DWG_NO"
                Height="50" Margin="0,0,0,10" Background="#9C27B0" Foreground="White" 
                FontSize="14" FontWeight="Bold"/>
        
        <Button x:Name="btnLabelOperation" Content="Operation No" Click="BtnLabel_Click" Tag="Operation_No"
                Height="50" Margin="0,0,0,10" Background="#00BCD4" Foreground="White" 
                FontSize="14" FontWeight="Bold"/>
        
        <Button x:Name="btnLabelProductLine" Content="Product Line" Click="BtnLabel_Click" Tag="Product_Line"
                Height="50" Margin="0,0,0,10" Background="#FF5722" Foreground="White" 
                FontSize="14" FontWeight="Bold"/>
        
        <Button x:Name="btnLabelSubject" Content="Subject" Click="BtnLabel_Click" Tag="Subject"
                Height="50" Margin="0,0,0,10" Background="#795548" Foreground="White" 
                FontSize="14" FontWeight="Bold"/>
        
        <!-- ADD THIS NEW BUTTON -->
        <Button x:Name="btnLabelTemplateRev" Content="Template Revision" Click="BtnLabel_Click" Tag="Template_Revision"
                Height="50" Margin="0,0,0,10" Background="#3F51B5" Foreground="White" 
                FontSize="14" FontWeight="Bold"/>
        
        <Separator Margin="0,10"/>
        
        <Button x:Name="btnLabelIgnore" Content="❌ Ignore (Label)" Click="BtnLabel_Click" Tag="Ignore"
                Height="40" Margin="0,0,0,10" Background="#757575" Foreground="White" 
                FontSize="12"/>
        
        <Button x:Name="btnClearLabel" Content="Clear Label" Click="BtnClearLabel_Click"
                Height="40" Margin="0,0,0,10" Background="#F44336" Foreground="White" 
                FontSize="12"/>
    </StackPanel>
</ScrollViewer>
```

## **Step 2: Add the Style for Template Revision**

Add this style to the `Window.Resources` section at the top of `MainWindow.xaml`:

```xml
<Window.Resources>
    <!-- Text Box Styles for Different Labels -->
    <Style x:Key="WINumberBox" TargetType="Border">
        <Setter Property="BorderBrush" Value="#2196F3"/>
        <Setter Property="BorderThickness" Value="3"/>
        <Setter Property="Background" Value="#E3F2FD"/>
    </Style>
    <Style x:Key="TitleBox" TargetType="Border">
        <Setter Property="BorderBrush" Value="#4CAF50"/>
        <Setter Property="BorderThickness" Value="3"/>
        <Setter Property="Background" Value="#E8F5E9"/>
    </Style>
    <Style x:Key="RevisionBox" TargetType="Border">
        <Setter Property="BorderBrush" Value="#FF9800"/>
        <Setter Property="BorderThickness" Value="3"/>
        <Setter Property="Background" Value="#FFF3E0"/>
    </Style>
    <Style x:Key="BOMBox" TargetType="Border">
        <Setter Property="BorderBrush" Value="#9C27B0"/>
        <Setter Property="BorderThickness" Value="3"/>
        <Setter Property="Background" Value="#F3E5F5"/>
    </Style>
    <Style x:Key="OperationBox" TargetType="Border">
        <Setter Property="BorderBrush" Value="#00BCD4"/>
        <Setter Property="BorderThickness" Value="3"/>
        <Setter Property="Background" Value="#E0F7FA"/>
    </Style>
    <Style x:Key="ProductLineBox" TargetType="Border">
        <Setter Property="BorderBrush" Value="#FF5722"/>
        <Setter Property="BorderThickness" Value="3"/>
        <Setter Property="Background" Value="#FBE9E7"/>
    </Style>
    <Style x:Key="SubjectBox" TargetType="Border">
        <Setter Property="BorderBrush" Value="#795548"/>
        <Setter Property="BorderThickness" Value="3"/>
        <Setter Property="Background" Value="#EFEBE9"/>
    </Style>
    
    <!-- ADD THIS NEW STYLE -->
    <Style x:Key="TemplateRevisionBox" TargetType="Border">
        <Setter Property="BorderBrush" Value="#3F51B5"/>
        <Setter Property="BorderThickness" Value="3"/>
        <Setter Property="Background" Value="#E8EAF6"/>
    </Style>
    
    <Style x:Key="UnlabeledBox" TargetType="Border">
        <Setter Property="BorderBrush" Value="#CCCCCC"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="Background" Value="#F5F5F5"/>
    </Style>
</Window.Resources>
```

## **Step 3: Update GetStyleForLabel Method**

In `MainWindow.xaml.cs`, update the `GetStyleForLabel` method to include the new label:

```csharp
private Style GetStyleForLabel(string label)
{
    if (string.IsNullOrEmpty(label))
        return (Style)FindResource("UnlabeledBox");
    
    return label switch
    {
        "WI_Number" => (Style)FindResource("WINumberBox"),
        "WI_Title" => (Style)FindResource("TitleBox"),
        "Revision" => (Style)FindResource("RevisionBox"),
        "BOM_ASSY_DWG_NO" => (Style)FindResource("BOMBox"),
        "Operation_No" => (Style)FindResource("OperationBox"),
        "Product_Line" => (Style)FindResource("ProductLineBox"),
        "Subject" => (Style)FindResource("SubjectBox"),
        "Template_Revision" => (Style)FindResource("TemplateRevisionBox"),  // ADD THIS LINE
        _ => (Style)FindResource("UnlabeledBox")
    };
}
```

## **Step 4: Update the Legend**

Update the legend at the bottom right to include the new color:

```xml
<!-- Legend -->
<Border Grid.Row="2" Background="White" BorderBrush="#E0E0E0" 
        BorderThickness="0,1,0,0" Padding="10">
    <StackPanel>
        <TextBlock Text="Color Legend:" FontSize="12" FontWeight="Bold" Margin="0,0,0,5"/>
        <StackPanel Orientation="Horizontal" Margin="0,2">
            <Border Width="20" Height="15" Background="#E3F2FD" BorderBrush="#2196F3" BorderThickness="2"/>
            <TextBlock Text="WI Number" FontSize="10" Margin="5,0"/>
        </StackPanel>
        <StackPanel Orientation="Horizontal" Margin="0,2">
            <Border Width="20" Height="15" Background="#E8F5E9" BorderBrush="#4CAF50" BorderThickness="2"/>
            <TextBlock Text="Title" FontSize="10" Margin="5,0"/>
        </StackPanel>
        <StackPanel Orientation="Horizontal" Margin="0,2">
            <Border Width="20" Height="15" Background="#FFF3E0" BorderBrush="#FF9800" BorderThickness="2"/>
            <TextBlock Text="Revision" FontSize="10" Margin="5,0"/>
        </StackPanel>
        
        <!-- ADD THIS -->
        <StackPanel Orientation="Horizontal" Margin="0,2">
            <Border Width="20" Height="15" Background="#E8EAF6" BorderBrush="#3F51B5" BorderThickness="2"/>
            <TextBlock Text="Template Rev" FontSize="10" Margin="5,0"/>
        </StackPanel>
        
        <StackPanel Orientation="Horizontal" Margin="0,2">
            <Border Width="20" Height="15" Background="#F5F5F5" BorderBrush="#CCCCCC" BorderThickness="2"/>
            <TextBlock Text="Unlabeled" FontSize="10" Margin="5,0"/>
        </StackPanel>
    </StackPanel>
</Border>
```

## **Step 5: Update ML Model to Include Template Revision**

In `TrainingDataModels.cs`, update the features:

```csharp
public class TextBoxFeatures
{
    [LoadColumn(0)]
    public float Left { get; set; }
    
    [LoadColumn(1)]
    public float Top { get; set; }
    
    [LoadColumn(2)]
    public float Width { get; set; }
    
    [LoadColumn(3)]
    public float Height { get; set; }
    
    [LoadColumn(4)]
    public float TextLength { get; set; }
    
    [LoadColumn(5)]
    public bool ContainsNumbers { get; set; }
    
    [LoadColumn(6)]
    public bool ContainsHyphen { get; set; }
    
    [LoadColumn(7)]
    public bool StartsWithWI { get; set; }
    
    [LoadColumn(8)]
    public bool IsAllDigits { get; set; }
    
    [LoadColumn(9)]
    public string RevisionType { get; set; }
    
    [LoadColumn(10)]
    [ColumnName("Label")]
    public string FieldType { get; set; }  // This will now include "Template_Revision"
}
```

## **Step 6: Update PowerPointExtractor to Extract Template Revision**

In your `PowerPointExtractor.cs`, add the field to the data dictionary initialization:

```csharp
private void ExtractData(List<TextBoxInfo> textBoxes, Dictionary<string, string> data)
{
    // Initialize all fields
    data["WI_Number"] = "";
    data["WI_Title"] = "";
    data["Revision"] = "";
    data["BOM_ASSY_DWG_NO"] = "";
    data["Operation_No"] = "";
    data["Product_Line"] = "";
    data["Subject"] = "";
    data["RevisionType"] = "";
    data["Template_Revision"] = "";  // ADD THIS LINE
    
    // ... rest of method
}
```

And update the Excel writer to include the new column in `WriteToExcel`:

```csharp
// Header Data sheet
var ws = package.Workbook.Worksheets.Add("Header Data");
var headers = new[] { "Document ID", "Source File Name", "WI Number", "WI Title",
    "Revision", "BOM/ASSY DWG NO", "Operation No", "Product Line", "Subject",
    "Revision Type", "Template Revision", "Total Pages", "Total Images" };  // Added "Template Revision"

for (int i = 0; i < headers.Length; i++)
    ws.Cells[1, i + 1].Value = headers[i];

FormatHeader(ws, headers.Length);

int row = 2;
foreach (var record in headerData)
{
    ws.Cells[row, 1].Value = record.GetValueOrDefault("DocumentID");
    ws.Cells[row, 2].Value = record.GetValueOrDefault("SourceFileName");
    ws.Cells[row, 3].Value = record.GetValueOrDefault("WI_Number");
    ws.Cells[row, 4].Value = record.GetValueOrDefault("WI_Title");
    ws.Cells[row, 5].Value = record.GetValueOrDefault("Revision");
    ws.Cells[row, 6].Value = record.GetValueOrDefault("BOM_ASSY_DWG_NO");
    ws.Cells[row, 7].Value = record.GetValueOrDefault("Operation_No");
    ws.Cells[row, 8].Value = record.GetValueOrDefault("Product_Line");
    ws.Cells[row, 9].Value = record.GetValueOrDefault("Subject");
    ws.Cells[row, 10].Value = record.GetValueOrDefault("RevisionType");
    ws.Cells[row, 11].Value = record.GetValueOrDefault("Template_Revision");  // ADD THIS LINE
    ws.Cells[row, 12].Value = record.GetValueOrDefault("TotalPages");
    ws.Cells[row, 13].Value = record.GetValueOrDefault("TotalImages");
    row++;
}
```

## **What This Does:**

✅ **Adds “Template Revision” button** in indigo/purple color (#3F51B5)  
✅ **Creates matching style** with indigo border and light indigo background  
✅ **Updates legend** to show the new color  
✅ **Integrates with ML training** - the model will learn to identify template revision text  
✅ **Extracts to Excel** in a new “Template Revision” column

Now when you label your training data, you can identify text boxes like “FM-ME-07 Rev.15” or just “Rev 17” with the **Template Revision** label, and the ML model will learn to extract this field automatically!

The button will appear below “Subject” in the right panel with an indigo/purple color scheme.​​​​​​​​​​​​​​​​