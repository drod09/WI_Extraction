using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using System.Windows.Forms;
using Microsoft.Office.Interop.PowerPoint;
using Microsoft.Office.Core;
using DrawingFont = System.Drawing.Font;
using PowerPointApp = Microsoft.Office.Interop.PowerPoint.Application;

namespace WorkInstructionRevisionSorter
{
    public partial class FieldMapperForm : Form
    {
        private string pptxPath;
        private List<TextBoxInfo> textBoxes;
        private Dictionary<string, string> fieldMappings;
        private TextBoxInfo selectedTextBox;
        private string currentField;
        private Bitmap slideImage;
        private float scale = 1.0f;

        public Dictionary<string, string> FieldMappings => fieldMappings;

        public FieldMapperForm(string pptxPath)
        {
            InitializeComponent();
            this.pptxPath = pptxPath;
            this.fieldMappings = new Dictionary<string, string>();
            this.textBoxes = new List<TextBoxInfo>();
        }

        private void FieldMapperForm_Load(object sender, EventArgs e)
        {
            cmbFields.Items.AddRange(new string[]
            {
                "WI_Number",
                "WI_Title",
                "Revision",
                "BOM_ASSY_DWG_NO",
                "Operation_No",
                "Product_Line",
                "Subject"
            });

            cmbFields.SelectedIndex = 0;
            currentField = "WI_Number";

            LoadPowerPointData();
            RenderSlidePreview();
        }

        private void LoadPowerPointData()
        {
            PowerPointApp pptApp = null;
            Presentation ppt = null;

            try
            {
                Cursor = Cursors.WaitCursor;
                lblStatus.Text = "Loading PowerPoint...";
                Application.DoEvents();

                pptApp = new PowerPointApp();
                ppt = pptApp.Presentations.Open(pptxPath,
                    MsoTriState.msoFalse, MsoTriState.msoFalse, MsoTriState.msoFalse);

                if (ppt.Slides.Count > 0)
                {
                    var firstSlide = ppt.Slides[1];

                    CollectTextBoxes(firstSlide.Shapes, textBoxes);
                    try { CollectTextBoxes(firstSlide.Master.Shapes, textBoxes); } catch { }
                    try { CollectTextBoxes(firstSlide.Design.SlideMaster.Shapes, textBoxes); } catch { }
                    try { CollectTextBoxes(firstSlide.CustomLayout.Shapes, textBoxes); } catch { }

                    string tempImagePath = System.IO.Path.Combine(System.IO.Path.GetTempPath(), 
                        $"slide_preview_{Guid.NewGuid()}.png");
                    
                    firstSlide.Export(tempImagePath, "PNG", 1024, 768);
                    slideImage = new Bitmap(tempImagePath);
                    
                    try { System.IO.File.Delete(tempImagePath); } catch { }

                    lblStatus.Text = $"Loaded {textBoxes.Count} text boxes";
                }

                ppt.Close();
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error loading PowerPoint:\n\n{ex.Message}", 
                    "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                ppt?.Close();
                pptApp?.Quit();
                Cursor = Cursors.Default;
            }
        }

        private void CollectTextBoxes(Microsoft.Office.Interop.PowerPoint.Shapes shapes, List<TextBoxInfo> textBoxes)
        {
            foreach (Microsoft.Office.Interop.PowerPoint.Shape shape in shapes)
            {
                try
                {
                    if (shape.Type == MsoShapeType.msoGroup)
                    {
                        CollectTextBoxes(shape.GroupItems, textBoxes);
                    }
                    else if (shape.HasTextFrame == MsoTriState.msoTrue)
                    {
                        string text = shape.TextFrame.TextRange.Text.Trim();
                        if (!string.IsNullOrEmpty(text))
                        {
                            textBoxes.Add(new TextBoxInfo
                            {
                                Text = text,
                                Left = shape.Left,
                                Top = shape.Top,
                                Width = shape.Width,
                                Height = shape.Height
                            });
                        }
                    }
                }
                catch { }
            }
        }

        private void CollectTextBoxes(Microsoft.Office.Interop.PowerPoint.GroupShapes groupShapes, List<TextBoxInfo> textBoxes)
        {
            foreach (Microsoft.Office.Interop.PowerPoint.Shape shape in groupShapes)
            {
                try
                {
                    if (shape.Type == MsoShapeType.msoGroup)
                    {
                        CollectTextBoxes(shape.GroupItems, textBoxes);
                    }
                    else if (shape.HasTextFrame == MsoTriState.msoTrue)
                    {
                        string text = shape.TextFrame.TextRange.Text.Trim();
                        if (!string.IsNullOrEmpty(text))
                        {
                            textBoxes.Add(new TextBoxInfo
                            {
                                Text = text,
                                Left = shape.Left,
                                Top = shape.Top,
                                Width = shape.Width,
                                Height = shape.Height
                            });
                        }
                    }
                }
                catch { }
            }
        }

        private void RenderSlidePreview()
        {
            if (slideImage == null || pictureBox.Width == 0 || pictureBox.Height == 0)
                return;

            Bitmap preview = new Bitmap(pictureBox.Width, pictureBox.Height);
            
            using (Graphics g = Graphics.FromImage(preview))
            {
                g.Clear(Color.White);

                float scaleX = (float)pictureBox.Width / slideImage.Width;
                float scaleY = (float)pictureBox.Height / slideImage.Height;
                scale = Math.Min(scaleX, scaleY) * 0.95f;

                float imageWidth = slideImage.Width * scale;
                float imageHeight = slideImage.Height * scale;
                float offsetX = (pictureBox.Width - imageWidth) / 2;
                float offsetY = (pictureBox.Height - imageHeight) / 2;

                g.DrawImage(slideImage, offsetX, offsetY, imageWidth, imageHeight);

                foreach (var textBox in textBoxes)
                {
                    RectangleF rect = new RectangleF(
                        offsetX + textBox.Left * scale,
                        offsetY + textBox.Top * scale,
                        textBox.Width * scale,
                        textBox.Height * scale
                    );

                    string mappedField = fieldMappings.FirstOrDefault(x => x.Value == textBox.Text).Key;
                    
                    Color boxColor;
                    if (textBox == selectedTextBox)
                    {
                        boxColor = Color.Yellow;
                    }
                    else if (!string.IsNullOrEmpty(mappedField))
                    {
                        boxColor = Color.LightGreen;
                    }
                    else
                    {
                        boxColor = Color.LightBlue;
                    }

                    using (Pen pen = new Pen(boxColor, 2))
                    using (SolidBrush brush = new SolidBrush(Color.FromArgb(50, boxColor)))
                    {
                        g.FillRectangle(brush, rect);
                        g.DrawRectangle(pen, Rectangle.Round(rect));
                    }

                    if (!string.IsNullOrEmpty(mappedField))
                    {
                        using (DrawingFont font = new DrawingFont("Arial", 8, FontStyle.Bold))
                        using (SolidBrush textBrush = new SolidBrush(Color.DarkGreen))
                        {
                            g.DrawString(mappedField, font, textBrush, rect.X, rect.Y - 15);
                        }
                    }
                }

                DrawLegend(g);
            }

            pictureBox.Image?.Dispose();
            pictureBox.Image = preview;
        }

        private void DrawLegend(Graphics g)
        {
            int legendX = 10;
            int legendY = 10;
            int legendWidth = 120;
            int legendHeight = 80;

            using (SolidBrush bgBrush = new SolidBrush(Color.FromArgb(200, Color.White)))
            using (Pen borderPen = new Pen(Color.Black, 1))
            using (DrawingFont font = new DrawingFont("Arial", 8))
            {
                g.FillRectangle(bgBrush, legendX, legendY, legendWidth, legendHeight);
                g.DrawRectangle(borderPen, legendX, legendY, legendWidth, legendHeight);

                using (SolidBrush brush = new SolidBrush(Color.Yellow))
                {
                    g.FillRectangle(brush, legendX + 5, legendY + 5, 15, 15);
                    g.DrawString("Selected", font, Brushes.Black, legendX + 25, legendY + 5);
                }

                using (SolidBrush brush = new SolidBrush(Color.LightGreen))
                {
                    g.FillRectangle(brush, legendX + 5, legendY + 30, 15, 15);
                    g.DrawString("Mapped", font, Brushes.Black, legendX + 25, legendY + 30);
                }

                using (SolidBrush brush = new SolidBrush(Color.LightBlue))
                {
                    g.FillRectangle(brush, legendX + 5, legendY + 55, 15, 15);
                    g.DrawString("Unmapped", font, Brushes.Black, legendX + 25, legendY + 55);
                }
            }
        }

        private void pictureBox_MouseClick(object sender, MouseEventArgs e)
        {
            if (slideImage == null) return;

            float imageWidth = slideImage.Width * scale;
            float imageHeight = slideImage.Height * scale;
            float offsetX = (pictureBox.Width - imageWidth) / 2;
            float offsetY = (pictureBox.Height - imageHeight) / 2;

            float slideX = (e.X - offsetX) / scale;
            float slideY = (e.Y - offsetY) / scale;

            foreach (var textBox in textBoxes)
            {
                if (slideX >= textBox.Left && slideX <= textBox.Left + textBox.Width &&
                    slideY >= textBox.Top && slideY <= textBox.Top + textBox.Height)
                {
                    selectedTextBox = textBox;
                    txtSelectedText.Text = textBox.Text;
                    lblSelectedField.Text = $"Click 'Assign to {currentField}' to map this text box";
                    btnAssign.Enabled = true;
                    RenderSlidePreview();
                    return;
                }
            }

            selectedTextBox = null;
            txtSelectedText.Text = "";
            lblSelectedField.Text = "Click on a text box to select it";
            btnAssign.Enabled = false;
            RenderSlidePreview();
        }

        private void cmbFields_SelectedIndexChanged(object sender, EventArgs e)
        {
            currentField = cmbFields.SelectedItem.ToString();
            
            if (selectedTextBox != null)
            {
                lblSelectedField.Text = $"Click 'Assign to {currentField}' to map this text box";
            }

            btnAssign.Text = $"Assign to {currentField}";

            if (fieldMappings.ContainsKey(currentField))
            {
                lblCurrentMapping.Text = $"Current: {fieldMappings[currentField]}";
            }
            else
            {
                lblCurrentMapping.Text = "Current: (not mapped)";
            }
        }

        private void btnAssign_Click(object sender, EventArgs e)
        {
            if (selectedTextBox == null) return;

            if (fieldMappings.ContainsKey(currentField))
            {
                fieldMappings[currentField] = selectedTextBox.Text;
            }
            else
            {
                fieldMappings.Add(currentField, selectedTextBox.Text);
            }

            lblStatus.Text = $"Mapped {currentField} = '{selectedTextBox.Text}'";
            lblCurrentMapping.Text = $"Current: {fieldMappings[currentField]}";

            if (cmbFields.SelectedIndex < cmbFields.Items.Count - 1)
            {
                cmbFields.SelectedIndex++;
            }

            UpdateMappingsList();
            RenderSlidePreview();
        }

        private void btnClearField_Click(object sender, EventArgs e)
        {
            if (fieldMappings.ContainsKey(currentField))
            {
                fieldMappings.Remove(currentField);
                lblStatus.Text = $"Cleared mapping for {currentField}";
                lblCurrentMapping.Text = "Current: (not mapped)";
                UpdateMappingsList();
                RenderSlidePreview();
            }
        }

        private void btnClearAll_Click(object sender, EventArgs e)
        {
            var result = MessageBox.Show("Clear all field mappings?", "Confirm", 
                MessageBoxButtons.YesNo, MessageBoxIcon.Question);
            
            if (result == DialogResult.Yes)
            {
                fieldMappings.Clear();
                lblStatus.Text = "All mappings cleared";
                lblCurrentMapping.Text = "Current: (not mapped)";
                UpdateMappingsList();
                RenderSlidePreview();
            }
        }

        private void UpdateMappingsList()
        {
            lstMappings.Items.Clear();
            
            foreach (var mapping in fieldMappings)
            {
                string displayText = mapping.Value.Length > 30 
                    ? mapping.Value.Substring(0, 30) + "..." 
                    : mapping.Value;
                lstMappings.Items.Add($"{mapping.Key}: {displayText}");
            }

            lblMappedCount.Text = $"{fieldMappings.Count} of 7 fields mapped";
        }

        private void btnSave_Click(object sender, EventArgs e)
        {
            if (fieldMappings.Count == 0)
            {
                MessageBox.Show("No field mappings to save.", "No Mappings", 
                    MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            DialogResult = DialogResult.OK;
            Close();
        }

        private void btnCancel_Click(object sender, EventArgs e)
        {
            DialogResult = DialogResult.Cancel;
            Close();
        }

        private void pictureBox_Resize(object sender, EventArgs e)
        {
            RenderSlidePreview();
        }
    }

    public class TextBoxInfo
    {
        public string Text { get; set; }
        public float Left { get; set; }
        public float Top { get; set; }
        public float Width { get; set; }
        public float Height { get; set; }
    }
}