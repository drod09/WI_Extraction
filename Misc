using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using UglyToad.PdfPig;
using UglyToad.PdfPig.Content;
using UglyToad.PdfPig.DocumentLayoutAnalysis.TextExtractor;
using OfficeOpenXml;

namespace WorkInstructionExtractor
{
public class PDFExtractor
{
public class ExtractionResult
{
public string ExcelPath { get; set; }
public string ImagesFolder { get; set; }
public string WINumber { get; set; }
}

```
    public ExtractionResult ExtractFromPDF(string pdfPath, string outputFolder, Action<int, string> progressCallback)
    {
        progressCallback?.Invoke(0, "Starting PDF extraction...");

        string fileName = Path.GetFileNameWithoutExtension(pdfPath);
        string imagesFolder = Path.Combine(outputFolder, $"{fileName}_Images");
        Directory.CreateDirectory(imagesFolder);

        string excelPath = Path.Combine(outputFolder, "Extracted_Data.xlsx");

        progressCallback?.Invoke(10, "Opening PDF...");

        using (PdfDocument document = PdfDocument.Open(pdfPath))
        {
            var headerData = new Dictionary<string, string>();
            var tocData = new List<Dictionary<string, string>>();
            var imageData = new List<Dictionary<string, string>>();

            progressCallback?.Invoke(20, "Extracting first page data...");

            // Extract from first page
            if (document.NumberOfPages > 0)
            {
                var firstPage = document.GetPage(1);
                headerData = ExtractHeaderData(firstPage, fileName);
                ExtractImagesFromPage(firstPage, 1, imagesFolder, headerData["WI_Number"], imageData);
            }

            progressCallback?.Invoke(40, "Building table of contents...");

            // Extract TOC from all pages
            for (int i = 1; i <= document.NumberOfPages; i++)
            {
                var page = document.GetPage(i);
                var subject = ExtractSubjectFromPage(page);
                
                tocData.Add(new Dictionary<string, string>
                {
                    ["DocumentID"] = "1",
                    ["WI_Number"] = headerData["WI_Number"],
                    ["SourceFileName"] = fileName,
                    ["PageNumber"] = i.ToString(),
                    ["SlideSubject"] = subject
                });

                progressCallback?.Invoke(40 + (int)(40.0 * i / document.NumberOfPages), 
                    $"Processing page {i} of {document.NumberOfPages}...");
            }

            progressCallback?.Invoke(85, "Extracting all images...");

            // Extract images from all pages
            for (int i = 2; i <= document.NumberOfPages; i++)
            {
                var page = document.GetPage(i);
                ExtractImagesFromPage(page, i, imagesFolder, headerData["WI_Number"], imageData);
            }

            progressCallback?.Invoke(95, "Writing to Excel...");

            WriteToExcel(headerData, tocData, imageData, excelPath, document.NumberOfPages);

            progressCallback?.Invoke(100, "Extraction complete!");

            return new ExtractionResult
            {
                ExcelPath = excelPath,
                ImagesFolder = imagesFolder,
                WINumber = headerData["WI_Number"]
            };
        }
    }

    private Dictionary<string, string> ExtractHeaderData(Page page, string fileName)
    {
        var data = new Dictionary<string, string>
        {
            ["DocumentID"] = "1",
            ["SourceFileName"] = fileName
        };

        var words = page.GetWords().ToList();

        // Extract fields using position-based detection (bottom of page)
        // Y coordinate in PDF: 0 is at bottom, increases upward
        double pageHeight = page.Height;

        foreach (var word in words)
        {
            string text = word.Text.Trim();
            double yFromTop = pageHeight - word.BoundingBox.Bottom; // Convert to "from top"
            double xFromLeft = word.BoundingBox.Left;

            // Subject field: ~6.8-7.1" from top (489-511 pts), X: 300-335 pts
            if (yFromTop >= 489 && yFromTop <= 515 && 
                xFromLeft >= 300 && xFromLeft <= 400 &&
                text.Length > 2 && text.Length < 100 &&
                !IsLabelText(text))
            {
                if (!data.ContainsKey("Subject"))
                {
                    // Get full line of text at this position
                    var lineWords = words.Where(w => 
                        Math.Abs((pageHeight - w.BoundingBox.Bottom) - yFromTop) < 5 &&
                        w.BoundingBox.Left >= 300).OrderBy(w => w.BoundingBox.Left);
                    
                    data["Subject"] = string.Join(" ", lineWords.Select(w => w.Text));
                }
            }

            // WI Number: Look for pattern like "WI-0665" or "W.I. 0665"
            if (System.Text.RegularExpressions.Regex.IsMatch(text, @"^W\.?I\.?\s*-?\s*\d+", 
                System.Text.RegularExpressions.RegexOptions.IgnoreCase))
            {
                data["WI_Number"] = text;
            }

            // Revision: Look for "Rev" followed by number
            if (text.StartsWith("Rev", StringComparison.OrdinalIgnoreCase) && text.Length <= 10)
            {
                data["Revision"] = text;
            }
        }

        // Fallback for WI_Number if not found
        if (!data.ContainsKey("WI_Number") || string.IsNullOrEmpty(data["WI_Number"]))
        {
            data["WI_Number"] = fileName;
        }

        return data;
    }

    private string ExtractSubjectFromPage(Page page)
    {
        var words = page.GetWords().ToList();
        double pageHeight = page.Height;

        // Look for subject at bottom of page
        foreach (var word in words)
        {
            string text = word.Text.Trim();
            double yFromTop = pageHeight - word.BoundingBox.Bottom;
            double xFromLeft = word.BoundingBox.Left;

            // Subject position: Y: 489-515 pts from top, X: 300-400 pts from left
            if (yFromTop >= 489 && yFromTop <= 515 && 
                xFromLeft >= 300 && xFromLeft <= 400 &&
                text.Length > 2 && text.Length < 100 &&
                !IsLabelText(text))
            {
                // Get full line of text
                var lineWords = words.Where(w => 
                    Math.Abs((pageHeight - w.BoundingBox.Bottom) - yFromTop) < 5 &&
                    w.BoundingBox.Left >= 300).OrderBy(w => w.BoundingBox.Left);
                
                string subject = string.Join(" ", lineWords.Select(w => w.Text));
                if (!IsLabelText(subject))
                {
                    return subject.ToUpper();
                }
            }
        }

        return "UNTITLED SLIDE";
    }

    private bool IsLabelText(string text)
    {
        string upper = text.ToUpper();
        return upper == "SUBJECT" || upper == "SUBJECT:" ||
               upper.Contains("COMPANY") || upper.Contains("WORK INSTRUCTION") ||
               upper.Contains("W.I. NUMBER") || upper.Contains("BOM") ||
               upper.Contains("OPERATION NO") || upper == "PRODUCT LINE" ||
               upper == "PAGE" || upper == "REV" ||
               upper.Contains("FM-ME") || upper.Contains("REVISION HISTORY") ||
               upper.Contains("SUBJECT OF SLIDE") ||
               System.Text.RegularExpressions.Regex.IsMatch(text, @"^\s*\d+\s+OF\s+\d+\s*$", 
                   System.Text.RegularExpressions.RegexOptions.IgnoreCase);
    }

    private void ExtractImagesFromPage(Page page, int pageNumber, string imagesFolder, 
        string wiNumber, List<Dictionary<string, string>> imageData)
    {
        var images = page.GetImages().ToList();
        int imageCounter = 1;

        foreach (var image in images)
        {
            try
            {
                var rawBytes = image.RawBytes;
                if (rawBytes != null && rawBytes.Count > 0)
                {
                    string imageName = $"{wiNumber}_Page{pageNumber}_Img{imageCounter}.png";
                    string imagePath = Path.Combine(imagesFolder, imageName);

                    // Save image
                    var bytes = rawBytes.ToArray();
                    File.WriteAllBytes(imagePath, bytes);

                    imageData.Add(new Dictionary<string, string>
                    {
                        ["DocumentID"] = "1",
                        ["WI_Number"] = wiNumber,
                        ["PageNumber"] = pageNumber.ToString(),
                        ["ImageNumber"] = imageCounter.ToString(),
                        ["ImageFileName"] = imageName,
                        ["ImagePath"] = imagePath
                    });

                    imageCounter++;
                }
            }
            catch
            {
                // Skip images that can't be extracted
            }
        }
    }

    private void WriteToExcel(Dictionary<string, string> headerData, 
        List<Dictionary<string, string>> tocData,
        List<Dictionary<string, string>> imageData,
        string excelPath, int totalPages)
    {
        ExcelPackage.LicenseContext = LicenseContext.NonCommercial;

        using (var package = new ExcelPackage())
        {
            // Header Data Sheet
            var headerSheet = package.Workbook.Worksheets.Add("Header Data");
            headerSheet.Cells[1, 1].Value = "Document ID";
            headerSheet.Cells[1, 2].Value = "Source File Name";
            headerSheet.Cells[1, 3].Value = "WI Number";
            headerSheet.Cells[1, 4].Value = "Subject";
            headerSheet.Cells[1, 5].Value = "Revision";
            headerSheet.Cells[1, 6].Value = "Total Pages";

            headerSheet.Cells[2, 1].Value = headerData.GetValueOrDefault("DocumentID", "1");
            headerSheet.Cells[2, 2].Value = headerData.GetValueOrDefault("SourceFileName", "");
            headerSheet.Cells[2, 3].Value = headerData.GetValueOrDefault("WI_Number", "");
            headerSheet.Cells[2, 4].Value = headerData.GetValueOrDefault("Subject", "");
            headerSheet.Cells[2, 5].Value = headerData.GetValueOrDefault("Revision", "");
            headerSheet.Cells[2, 6].Value = totalPages;

            headerSheet.Cells[1, 1, 1, 6].Style.Font.Bold = true;
            headerSheet.Cells.AutoFitColumns();

            // Table of Contents Sheet
            var tocSheet = package.Workbook.Worksheets.Add("Table of Contents");
            tocSheet.Cells[1, 1].Value = "Document ID";
            tocSheet.Cells[1, 2].Value = "WI Number";
            tocSheet.Cells[1, 3].Value = "Source File Name";
            tocSheet.Cells[1, 4].Value = "Page Number";
            tocSheet.Cells[1, 5].Value = "Slide Subject";

            int tocRow = 2;
            foreach (var entry in tocData)
            {
                tocSheet.Cells[tocRow, 1].Value = entry.GetValueOrDefault("DocumentID", "");
                tocSheet.Cells[tocRow, 2].Value = entry.GetValueOrDefault("WI_Number", "");
                tocSheet.Cells[tocRow, 3].Value = entry.GetValueOrDefault("SourceFileName", "");
                tocSheet.Cells[tocRow, 4].Value = entry.GetValueOrDefault("PageNumber", "");
                tocSheet.Cells[tocRow, 5].Value = entry.GetValueOrDefault("SlideSubject", "");
                tocRow++;
            }

            tocSheet.Cells[1, 1, 1, 5].Style.Font.Bold = true;
            tocSheet.Cells.AutoFitColumns();

            // Images Sheet
            var imagesSheet = package.Workbook.Worksheets.Add("Images");
            imagesSheet.Cells[1, 1].Value = "Document ID";
            imagesSheet.Cells[1, 2].Value = "WI Number";
            imagesSheet.Cells[1, 3].Value = "Page Number";
            imagesSheet.Cells[1, 4].Value = "Image Number";
            imagesSheet.Cells[1, 5].Value = "Image File Name";
            imagesSheet.Cells[1, 6].Value = "Image Path";

            int imageRow = 2;
            foreach (var image in imageData)
            {
                imagesSheet.Cells[imageRow, 1].Value = image.GetValueOrDefault("DocumentID", "");
                imagesSheet.Cells[imageRow, 2].Value = image.GetValueOrDefault("WI_Number", "");
                imagesSheet.Cells[imageRow, 3].Value = image.GetValueOrDefault("PageNumber", "");
                imagesSheet.Cells[imageRow, 4].Value = image.GetValueOrDefault("ImageNumber", "");
                imagesSheet.Cells[imageRow, 5].Value = image.GetValueOrDefault("ImageFileName", "");
                imagesSheet.Cells[imageRow, 6].Value = image.GetValueOrDefault("ImagePath", "");
                imageRow++;
            }

            imagesSheet.Cells[1, 1, 1, 6].Style.Font.Bold = true;
            imagesSheet.Cells.AutoFitColumns();

            package.SaveAs(new FileInfo(excelPath));
        }
    }
}
```

}
------

using System;
using System.IO;
using System.Windows.Forms;

namespace WorkInstructionExtractor
{
public partial class Form1 : Form
{
private Button btnSelectPDF;
private Button btnSelectFolder;
private Button btnExtract;
private TextBox txtPDFPath;
private TextBox txtOutputFolder;
private TextBox txtLog;
private ProgressBar progressBar;
private Label lblPDF;
private Label lblOutput;
private Label lblProgress;

```
    public Form1()
    {
        InitializeComponent();
    }

    private void InitializeComponent()
    {
        this.Text = "Work Instruction PDF Extractor - .NET 8.0";
        this.Size = new System.Drawing.Size(800, 600);
        this.StartPosition = FormStartPosition.CenterScreen;

        // PDF Selection
        lblPDF = new Label
        {
            Text = "PDF File:",
            Location = new System.Drawing.Point(20, 20),
            Size = new System.Drawing.Size(100, 20)
        };

        txtPDFPath = new TextBox
        {
            Location = new System.Drawing.Point(20, 45),
            Size = new System.Drawing.Size(600, 25),
            ReadOnly = true
        };

        btnSelectPDF = new Button
        {
            Text = "Browse PDF...",
            Location = new System.Drawing.Point(630, 43),
            Size = new System.Drawing.Size(120, 30)
        };
        btnSelectPDF.Click += BtnSelectPDF_Click;

        // Output Folder Selection
        lblOutput = new Label
        {
            Text = "Output Folder:",
            Location = new System.Drawing.Point(20, 85),
            Size = new System.Drawing.Size(100, 20)
        };

        txtOutputFolder = new TextBox
        {
            Location = new System.Drawing.Point(20, 110),
            Size = new System.Drawing.Size(600, 25),
            ReadOnly = true
        };

        btnSelectFolder = new Button
        {
            Text = "Browse Folder...",
            Location = new System.Drawing.Point(630, 108),
            Size = new System.Drawing.Size(120, 30)
        };
        btnSelectFolder.Click += BtnSelectFolder_Click;

        // Extract Button
        btnExtract = new Button
        {
            Text = "Extract Data",
            Location = new System.Drawing.Point(330, 160),
            Size = new System.Drawing.Size(140, 40),
            Enabled = false
        };
        btnExtract.Click += BtnExtract_Click;

        // Progress
        lblProgress = new Label
        {
            Text = "Progress:",
            Location = new System.Drawing.Point(20, 220),
            Size = new System.Drawing.Size(100, 20)
        };

        progressBar = new ProgressBar
        {
            Location = new System.Drawing.Point(20, 245),
            Size = new System.Drawing.Size(730, 25)
        };

        // Log
        txtLog = new TextBox
        {
            Location = new System.Drawing.Point(20, 290),
            Size = new System.Drawing.Size(730, 240),
            Multiline = true,
            ScrollBars = ScrollBars.Vertical,
            ReadOnly = true,
            Font = new System.Drawing.Font("Consolas", 9)
        };

        // Add controls
        this.Controls.Add(lblPDF);
        this.Controls.Add(txtPDFPath);
        this.Controls.Add(btnSelectPDF);
        this.Controls.Add(lblOutput);
        this.Controls.Add(txtOutputFolder);
        this.Controls.Add(btnSelectFolder);
        this.Controls.Add(btnExtract);
        this.Controls.Add(lblProgress);
        this.Controls.Add(progressBar);
        this.Controls.Add(txtLog);
    }

    private void BtnSelectPDF_Click(object? sender, EventArgs e)
    {
        using (OpenFileDialog dialog = new OpenFileDialog())
        {
            dialog.Filter = "PDF Files (*.pdf)|*.pdf";
            dialog.Title = "Select PDF File";

            if (dialog.ShowDialog() == DialogResult.OK)
            {
                txtPDFPath.Text = dialog.FileName;
                UpdateExtractButton();
            }
        }
    }

    private void BtnSelectFolder_Click(object? sender, EventArgs e)
    {
        using (FolderBrowserDialog dialog = new FolderBrowserDialog())
        {
            dialog.Description = "Select Output Folder";

            if (dialog.ShowDialog() == DialogResult.OK)
            {
                txtOutputFolder.Text = dialog.SelectedPath;
                UpdateExtractButton();
            }
        }
    }

    private void UpdateExtractButton()
    {
        btnExtract.Enabled = !string.IsNullOrEmpty(txtPDFPath.Text) && 
                             !string.IsNullOrEmpty(txtOutputFolder.Text);
    }

    private async void BtnExtract_Click(object? sender, EventArgs e)
    {
        btnExtract.Enabled = false;
        btnSelectPDF.Enabled = false;
        btnSelectFolder.Enabled = false;
        progressBar.Value = 0;
        txtLog.Clear();

        try
        {
            Log("Starting extraction...");

            var extractor = new PDFExtractor();
            
            await Task.Run(() =>
            {
                var result = extractor.ExtractFromPDF(
                    txtPDFPath.Text,
                    txtOutputFolder.Text,
                    (progress, message) =>
                    {
                        this.Invoke((MethodInvoker)delegate
                        {
                            progressBar.Value = progress;
                            Log(message);
                        });
                    }
                );

                this.Invoke((MethodInvoker)delegate
                {
                    Log($"\n✓ Extraction Complete!");
                    Log($"  Excel: {result.ExcelPath}");
                    Log($"  Images: {result.ImagesFolder}");
                    Log($"  WI Number: {result.WINumber}");
                    
                    MessageBox.Show(
                        $"Extraction completed successfully!\n\n" +
                        $"Excel file: {result.ExcelPath}\n" +
                        $"Images folder: {result.ImagesFolder}",
                        "Success",
                        MessageBoxButtons.OK,
                        MessageBoxIcon.Information
                    );
                });
            });
        }
        catch (Exception ex)
        {
            Log($"\n✗ Error: {ex.Message}");
            MessageBox.Show($"Error during extraction:\n\n{ex.Message}", "Error", 
                MessageBoxButtons.OK, MessageBoxIcon.Error);
        }
        finally
        {
            btnExtract.Enabled = true;
            btnSelectPDF.Enabled = true;
            btnSelectFolder.Enabled = true;
        }
    }

    private void Log(string message)
    {
        txtLog.AppendText($"[{DateTime.Now:HH:mm:ss}] {message}\r\n");
    }

    [STAThread]
    static void Main()
    {
        Application.EnableVisualStyles();
        Application.SetCompatibleTextRenderingDefault(false);
        Application.Run(new Form1());
    }
}
```

}
------

<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>WinExe</OutputType>
    <TargetFramework>net8.0-windows</TargetFramework>
    <Nullable>enable</Nullable>
    <UseWindowsForms>true</UseWindowsForms>
    <ImplicitUsings>enable</ImplicitUsings>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="PdfPig" Version="0.1.9" />
    <PackageReference Include="EPPlus" Version="7.5.2" />
  </ItemGroup>

</Project>

--------
# PowerPoint to PDF Batch Converter

# Converts all .pptx files in a folder to PDF format

param(
[Parameter(Mandatory=$true)]
[string]$InputFolder,

```
[Parameter(Mandatory=$false)]
[string]$OutputFolder = $null
```

)

# If no output folder specified, use input folder

if ([string]::IsNullOrEmpty($OutputFolder)) {
$OutputFolder = $InputFolder
}

# Create output folder if it doesn’t exist

if (!(Test-Path $OutputFolder)) {
New-Item -ItemType Directory -Path $OutputFolder | Out-Null
}

Write-Host “Starting PowerPoint to PDF conversion…” -ForegroundColor Green
Write-Host “Input Folder: $InputFolder”
Write-Host “Output Folder: $OutputFolder”
Write-Host “”

# Create PowerPoint application

$pptApp = New-Object -ComObject PowerPoint.Application
$pptApp.Visible = [Microsoft.Office.Core.MsoTriState]::msoFalse
$pptApp.DisplayAlerts = [Microsoft.Office.Interop.PowerPoint.PpAlertLevel]::ppAlertsNone

# Get all PowerPoint files

$pptFiles = Get-ChildItem -Path $InputFolder -Filter “*.pptx” -File

$totalFiles = $pptFiles.Count
$currentFile = 0

Write-Host “Found $totalFiles PowerPoint file(s) to convert`n”

foreach ($file in $pptFiles) {
$currentFile++
$percentComplete = [math]::Round(($currentFile / $totalFiles) * 100)

```
Write-Host "[$currentFile/$totalFiles] Converting: $($file.Name)" -ForegroundColor Cyan

try {
    # Open presentation
    $presentation = $pptApp.Presentations.Open($file.FullName, $true, $false, $false)
    
    # Generate PDF path
    $pdfPath = Join-Path $OutputFolder ($file.BaseName + ".pdf")
    
    # Save as PDF (format code 32 = ppSaveAsPDF)
    $presentation.SaveAs($pdfPath, 32)
    
    # Close presentation
    $presentation.Close()
    
    Write-Host "  ✓ Saved: $pdfPath" -ForegroundColor Green
}
catch {
    Write-Host "  ✗ Error: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host ""
```

}

# Quit PowerPoint

$pptApp.Quit()

# Release COM objects

[System.Runtime.Interopservices.Marshal]::ReleaseComObject($pptApp) | Out-Null
[System.GC]::Collect()
[System.GC]::WaitForPendingFinalizers()

Write-Host “Conversion complete!” -ForegroundColor Green
Write-Host “Converted $currentFile of $totalFiles files”


-----

