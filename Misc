using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace WorkInstructionExtractor
{
public partial class Form1 : Form
{
private BackgroundWorker backgroundWorker;

    public Form1()
    {
        InitializeComponent();
        InitializeBackgroundWorker();
    }

    private void InitializeBackgroundWorker()
    {
        backgroundWorker = new BackgroundWorker
        {
            WorkerReportsProgress = true,
            WorkerSupportsCancellation = true
        };

        backgroundWorker.DoWork += BackgroundWorker_DoWork;
        backgroundWorker.ProgressChanged += BackgroundWorker_ProgressChanged;
        backgroundWorker.RunWorkerCompleted += BackgroundWorker_RunWorkerCompleted;
    }

    private void btnSelectFile_Click(object sender, EventArgs e)
    {
        using (OpenFileDialog openFileDialog = new OpenFileDialog())
        {
            openFileDialog.Filter = "PowerPoint Files (*.pptx)|*.pptx|All Files (*.*)|*.*";
            openFileDialog.Title = "Select PowerPoint Work Instruction";

            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                txtPowerPointPath.Text = openFileDialog.FileName;
                LogMessage($"Selected PowerPoint: {Path.GetFileName(openFileDialog.FileName)}");
            }
        }
    }

    private void btnSelectOutputFolder_Click(object sender, EventArgs e)
    {
        using (FolderBrowserDialog folderDialog = new FolderBrowserDialog())
        {
            folderDialog.Description = "Select Output Folder";
            
            // Set default to ExtractData folder on Desktop
            string defaultPath = Path.Combine(
                Environment.GetFolderPath(Environment.SpecialFolder.Desktop),
                "ExtractData"
            );
            
            if (Directory.Exists(defaultPath))
            {
                folderDialog.SelectedPath = defaultPath;
            }

            if (folderDialog.ShowDialog() == DialogResult.OK)
            {
                txtOutputFolder.Text = folderDialog.SelectedPath;
                LogMessage($"Output folder: {folderDialog.SelectedPath}");
            }
        }
    }

    private void BtnConfigureMapping_Click(object sender, EventArgs e)
    {
        // Check if PowerPoint file is selected
        if (string.IsNullOrWhiteSpace(txtPowerPointPath.Text))
        {
            MessageBox.Show("Please select a PowerPoint file first.", "No File Selected",
                MessageBoxButtons.OK, MessageBoxIcon.Warning);
            return;
        }

        if (!File.Exists(txtPowerPointPath.Text))
        {
            MessageBox.Show("The selected PowerPoint file does not exist.", "File Not Found",
                MessageBoxButtons.OK, MessageBoxIcon.Error);
            return;
        }

        // Extract text boxes from the PowerPoint
        LogMessage("Opening PowerPoint to detect fields...");

        try
        {
            var textBoxes = ExtractTextBoxesFromPowerPoint(txtPowerPointPath.Text);

            if (textBoxes.Count == 0)
            {
                MessageBox.Show("No text boxes found in the PowerPoint file.", "No Fields Detected",
                    MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            LogMessage($"Found {textBoxes.Count} text boxes");

            // Convert to DetectedField objects
            var detectedFields = textBoxes.Select(tb => new DetectedField
            {
                Text = tb.Text,
                Left = tb.Left,
                Top = tb.Top,
                Width = tb.Width,
                Height = tb.Height
            }).ToList();

            // Check for existing mappings
            string suggestedTemplate = FieldMappingManager.SuggestTemplate(textBoxes);
            Dictionary<string, string> existingMappings = null;

            if (!string.IsNullOrEmpty(suggestedTemplate))
            {
                var result = MessageBox.Show(
                    $"Detected template: {suggestedTemplate}\n\nWould you like to load existing mappings for this template?",
                    "Load Existing Mappings",
                    MessageBoxButtons.YesNoCancel,
                    MessageBoxIcon.Question);

                if (result == DialogResult.Cancel)
                    return;

                if (result == DialogResult.Yes)
                {
                    existingMappings = FieldMappingManager.GetMappings(suggestedTemplate);
                }
            }

            // Show field mapping dialog
            using (var mappingForm = new FieldMappingForm(detectedFields, existingMappings))
            {
                if (mappingForm.ShowDialog() == DialogResult.OK)
                {
                    // Save the mappings
                    FieldMappingManager.SaveMapping(mappingForm.TemplateName, mappingForm.Mappings);

                    LogMessage($"Field mapping saved as: {mappingForm.TemplateName}", Color.Green);
                    MessageBox.Show($"Field mapping configuration saved successfully!\n\nTemplate: {mappingForm.TemplateName}\nMappings: {mappingForm.Mappings.Count}",
                        "Success", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
            }
        }
        catch (Exception ex)
        {
            LogMessage($"Error configuring field mapping: {ex.Message}", Color.Red);
            MessageBox.Show($"An error occurred while configuring field mapping:\n\n{ex.Message}",
                "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
        }
    }

    private void BtnManageMappings_Click(object sender, EventArgs e)
    {
        using (var manageForm = new ManageMappingsForm())
        {
            manageForm.ShowDialog();
        }
    }

    private List<TextBoxInfo> ExtractTextBoxesFromPowerPoint(string pptxPath)
    {
        var textBoxes = new List<TextBoxInfo>();
        Microsoft.Office.Interop.PowerPoint.Application pptApp = null;
        Microsoft.Office.Interop.PowerPoint.Presentation ppt = null;

        try
        {
            pptApp = new Microsoft.Office.Interop.PowerPoint.Application();
            ppt = pptApp.Presentations.Open(pptxPath,
                Microsoft.Office.Core.MsoTriState.msoFalse,
                Microsoft.Office.Core.MsoTriState.msoFalse,
                Microsoft.Office.Core.MsoTriState.msoFalse);

            if (ppt.Slides.Count > 0)
            {
                var firstSlide = ppt.Slides[1];

                // Collect from slide
                CollectTextBoxesForMapping(firstSlide.Shapes, textBoxes);

                // Collect from master
                try { CollectTextBoxesForMapping(firstSlide.Master.Shapes, textBoxes); } catch { }
                try { CollectTextBoxesForMapping(firstSlide.Design.SlideMaster.Shapes, textBoxes); } catch { }
                try { CollectTextBoxesForMapping(firstSlide.CustomLayout.Shapes, textBoxes); } catch { }
            }

            ppt.Close();
        }
        finally
        {
            if (ppt != null)
            {
                try { ppt.Close(); } catch { }
            }
            if (pptApp != null)
            {
                try { pptApp.Quit(); } catch { }
            }
        }

        return textBoxes;
    }

    private void CollectTextBoxesForMapping(Microsoft.Office.Interop.PowerPoint.Shapes shapes, List<TextBoxInfo> textBoxes)
    {
        foreach (Microsoft.Office.Interop.PowerPoint.Shape shape in shapes)
        {
            try
            {
                if (shape.Type == Microsoft.Office.Core.MsoShapeType.msoGroup)
                {
                    CollectTextBoxesFromGroupForMapping(shape.GroupItems, textBoxes);
                }
                else if (shape.HasTextFrame == Microsoft.Office.Core.MsoTriState.msoTrue)
                {
                    string text = shape.TextFrame.TextRange.Text.Trim();
                    if (!string.IsNullOrEmpty(text))
                    {
                        textBoxes.Add(new TextBoxInfo
                        {
                            Text = text,
                            Left = shape.Left,
                            Top = shape.Top,
                            Width = shape.Width,
                            Height = shape.Height
                        });
                    }
                }
            }
            catch { }
        }
    }

    private void CollectTextBoxesFromGroupForMapping(Microsoft.Office.Interop.PowerPoint.GroupShapes groupShapes, List<TextBoxInfo> textBoxes)
    {
        foreach (Microsoft.Office.Interop.PowerPoint.Shape shape in groupShapes)
        {
            try
            {
                if (shape.Type == Microsoft.Office.Core.MsoShapeType.msoGroup)
                {
                    CollectTextBoxesFromGroupForMapping(shape.GroupItems, textBoxes);
                }
                else if (shape.HasTextFrame == Microsoft.Office.Core.MsoTriState.msoTrue)
                {
                    string text = shape.TextFrame.TextRange.Text.Trim();
                    if (!string.IsNullOrEmpty(text))
                    {
                        textBoxes.Add(new TextBoxInfo
                        {
                            Text = text,
                            Left = shape.Left,
                            Top = shape.Top,
                            Width = shape.Width,
                            Height = shape.Height
                        });
                    }
                }
            }
            catch { }
        }
    }

    private void btnExtract_Click(object sender, EventArgs e)
    {
        // Validation
        if (string.IsNullOrWhiteSpace(txtPowerPointPath.Text))
        {
            MessageBox.Show("Please select a PowerPoint file.", "Validation Error",
                MessageBoxButtons.OK, MessageBoxIcon.Warning);
            return;
        }

        // Auto-set output folder if not set
        if (string.IsNullOrWhiteSpace(txtOutputFolder.Text))
        {
            string defaultPath = Path.Combine(
                Environment.GetFolderPath(Environment.SpecialFolder.Desktop),
                "ExtractData"
            );
            
            // Create the folder if it doesn't exist
            if (!Directory.Exists(defaultPath))
            {
                try
                {
                    Directory.CreateDirectory(defaultPath);
                    LogMessage($"Created output folder: {defaultPath}");
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Could not create output folder:\n\n{ex.Message}", 
                        "Error Creating Folder",
                        MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }
            }
            
            txtOutputFolder.Text = defaultPath;
            LogMessage($"Using default output folder: {defaultPath}");
        }

        // Disable UI during processing
        SetUIEnabled(false);
        txtLog.Clear();
        progressBar.Value = 0;

        // Start background processing
        var workData = new ExtractionWorkData
        {
            PowerPointPath = txtPowerPointPath.Text,
            OutputFolder = txtOutputFolder.Text
        };

        backgroundWorker.RunWorkerAsync(workData);
    }

    private void BackgroundWorker_DoWork(object sender, DoWorkEventArgs e)
    {
        var worker = sender as BackgroundWorker;
        var data = e.Argument as ExtractionWorkData;

        try
        {
            // Extract PowerPoint data
            worker.ReportProgress(10, "Extracting data from PowerPoint...");

            var extractor = new PowerPointExtractor();
            var extractResult = extractor.ExtractWorkInstruction(
                data.PowerPointPath,
                data.OutputFolder,
                (progress, message) => worker.ReportProgress(progress, message)
            );

            worker.ReportProgress(100, $"Complete! Data extracted to: {extractResult.ExcelPath}");
            e.Result = new ExtractionResultWrapper
            {
                Success = true,
                ExcelPath = extractResult.ExcelPath
            };
        }
        catch (Exception ex)
        {
            e.Result = new ExtractionResultWrapper
            {
                Success = false,
                ErrorMessage = ex.Message
            };
        }
    }

    private void BackgroundWorker_ProgressChanged(object sender, ProgressChangedEventArgs e)
    {
        progressBar.Value = e.ProgressPercentage;
        lblStatus.Text = e.UserState?.ToString() ?? "Processing...";
        LogMessage(e.UserState?.ToString() ?? "");
    }

    private void BackgroundWorker_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
    {
        SetUIEnabled(true);

        var result = e.Result as ExtractionResultWrapper;

        if (result != null && result.Success)
        {
            LogMessage("✓ Extraction completed successfully!", Color.Green);

            var message = $"Data extracted successfully!\n\nExcel file: {result.ExcelPath}";

            var openFiles = MessageBox.Show(
                message + "\n\nWould you like to open the output folder?",
                "Success",
                MessageBoxButtons.YesNo,
                MessageBoxIcon.Information
            );

            if (openFiles == DialogResult.Yes)
            {
                System.Diagnostics.Process.Start("explorer.exe", txtOutputFolder.Text);
            }
        }
        else if (result != null && !result.Success)
        {
            LogMessage($"✗ Error: {result.ErrorMessage}", Color.Red);
            MessageBox.Show($"An error occurred:\n\n{result.ErrorMessage}",
                "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
        }
    }

    private void SetUIEnabled(bool enabled)
    {
        btnSelectFile.Enabled = enabled;
        btnSelectOutputFolder.Enabled = enabled;
        btnExtract.Enabled = enabled;
        btnConfigureMapping.Enabled = enabled;
        btnManageTemplates.Enabled = enabled;
    }

    private void LogMessage(string message, Color? color = null)
    {
        if (txtLog.InvokeRequired)
        {
            txtLog.Invoke(new Action(() => LogMessage(message, color)));
            return;
        }

        txtLog.SelectionStart = txtLog.TextLength;
        txtLog.SelectionLength = 0;
        txtLog.SelectionColor = color ?? Color.Black;
        txtLog.AppendText($"[{DateTime.Now:HH:mm:ss}] {message}\n");
        txtLog.SelectionColor = txtLog.ForeColor;
        txtLog.ScrollToCaret();
    }

    private void Form1_Load(object sender, EventArgs e)
    {
        LogMessage("Work Instruction Extractor ready.");
        
        // Set default output folder on load
        string defaultPath = Path.Combine(
            Environment.GetFolderPath(Environment.SpecialFolder.Desktop),
            "ExtractData"
        );
        
        txtOutputFolder.Text = defaultPath;
        LogMessage($"Default output folder set to: {defaultPath}");
    }
}

// Helper classes
public class ExtractionWorkData
{
    public string PowerPointPath { get; set; }
    public string OutputFolder { get; set; }
}

public class ExtractionResultWrapper
{
    public bool Success { get; set; }
    public string ExcelPath { get; set; }
    public string ErrorMessage { get; set; }
}

}