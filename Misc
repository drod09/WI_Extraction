using System;
using System.IO;
using System.Windows.Forms;

namespace WorkInstructionExtractorPDF
{
public partial class Form1 : Form
{
private Button btnSelectPDF;
private Button btnSelectFolder;
private Button btnExtract;
private TextBox txtPDFPath;
private TextBox txtOutputFolder;
private TextBox txtLog;
private ProgressBar progressBar;
private Label lblPDF;
private Label lblOutput;
private Label lblProgress;

```
    public Form1()
    {
        InitializeComponent();
    }

    private void InitializeComponent()
    {
        this.Text = "Work Instruction PDF Extractor - .NET 8.0";
        this.Size = new System.Drawing.Size(800, 600);
        this.StartPosition = FormStartPosition.CenterScreen;

        // PDF Selection
        lblPDF = new Label
        {
            Text = "PDF File:",
            Location = new System.Drawing.Point(20, 20),
            Size = new System.Drawing.Size(100, 20)
        };

        txtPDFPath = new TextBox
        {
            Location = new System.Drawing.Point(20, 45),
            Size = new System.Drawing.Size(600, 25),
            ReadOnly = true
        };

        btnSelectPDF = new Button
        {
            Text = "Browse PDF...",
            Location = new System.Drawing.Point(630, 43),
            Size = new System.Drawing.Size(120, 30)
        };
        btnSelectPDF.Click += BtnSelectPDF_Click;

        // Output Folder Selection
        lblOutput = new Label
        {
            Text = "Output Folder:",
            Location = new System.Drawing.Point(20, 85),
            Size = new System.Drawing.Size(100, 20)
        };

        txtOutputFolder = new TextBox
        {
            Location = new System.Drawing.Point(20, 110),
            Size = new System.Drawing.Size(600, 25),
            ReadOnly = true
        };

        btnSelectFolder = new Button
        {
            Text = "Browse Folder...",
            Location = new System.Drawing.Point(630, 108),
            Size = new System.Drawing.Size(120, 30)
        };
        btnSelectFolder.Click += BtnSelectFolder_Click;

        // Extract Button
        btnExtract = new Button
        {
            Text = "Extract Data",
            Location = new System.Drawing.Point(330, 160),
            Size = new System.Drawing.Size(140, 40),
            Enabled = false
        };
        btnExtract.Click += BtnExtract_Click;

        // Progress
        lblProgress = new Label
        {
            Text = "Progress:",
            Location = new System.Drawing.Point(20, 220),
            Size = new System.Drawing.Size(100, 20)
        };

        progressBar = new ProgressBar
        {
            Location = new System.Drawing.Point(20, 245),
            Size = new System.Drawing.Size(730, 25)
        };

        // Log
        txtLog = new TextBox
        {
            Location = new System.Drawing.Point(20, 290),
            Size = new System.Drawing.Size(730, 240),
            Multiline = true,
            ScrollBars = ScrollBars.Vertical,
            ReadOnly = true,
            Font = new System.Drawing.Font("Consolas", 9)
        };

        // Add controls
        this.Controls.Add(lblPDF);
        this.Controls.Add(txtPDFPath);
        this.Controls.Add(btnSelectPDF);
        this.Controls.Add(lblOutput);
        this.Controls.Add(txtOutputFolder);
        this.Controls.Add(btnSelectFolder);
        this.Controls.Add(btnExtract);
        this.Controls.Add(lblProgress);
        this.Controls.Add(progressBar);
        this.Controls.Add(txtLog);
    }

    private void BtnSelectPDF_Click(object? sender, EventArgs e)
    {
        using (OpenFileDialog dialog = new OpenFileDialog())
        {
            dialog.Filter = "PDF Files (*.pdf)|*.pdf";
            dialog.Title = "Select PDF File";

            if (dialog.ShowDialog() == DialogResult.OK)
            {
                txtPDFPath.Text = dialog.FileName;
                UpdateExtractButton();
            }
        }
    }

    private void BtnSelectFolder_Click(object? sender, EventArgs e)
    {
        using (FolderBrowserDialog dialog = new FolderBrowserDialog())
        {
            dialog.Description = "Select Output Folder";

            if (dialog.ShowDialog() == DialogResult.OK)
            {
                txtOutputFolder.Text = dialog.SelectedPath;
                UpdateExtractButton();
            }
        }
    }

    private void UpdateExtractButton()
    {
        btnExtract.Enabled = !string.IsNullOrEmpty(txtPDFPath.Text) && 
                             !string.IsNullOrEmpty(txtOutputFolder.Text);
    }

    private async void BtnExtract_Click(object? sender, EventArgs e)
    {
        btnExtract.Enabled = false;
        btnSelectPDF.Enabled = false;
        btnSelectFolder.Enabled = false;
        progressBar.Value = 0;
        txtLog.Clear();

        try
        {
            Log("Starting extraction...");

            var extractor = new PDFExtractor();
            
            await Task.Run(() =>
            {
                var result = extractor.ExtractFromPDF(
                    txtPDFPath.Text,
                    txtOutputFolder.Text,
                    (progress, message) =>
                    {
                        this.Invoke((MethodInvoker)delegate
                        {
                            progressBar.Value = progress;
                            Log(message);
                        });
                    }
                );

                this.Invoke((MethodInvoker)delegate
                {
                    Log($"\n✓ Extraction Complete!");
                    Log($"  Excel: {result.ExcelPath}");
                    Log($"  Base Images: {result.BaseImagesFolder}");
                    Log($"  Composed Images: {result.ComposedImagesFolder}");
                    Log($"  WI Number: {result.WINumber}");
                    
                    MessageBox.Show(
                        $"Extraction completed successfully!\n\n" +
                        $"Excel file: {result.ExcelPath}\n" +
                        $"Base images: {result.BaseImagesFolder}\n" +
                        $"Composed images: {result.ComposedImagesFolder}",
                        "Success",
                        MessageBoxButtons.OK,
                        MessageBoxIcon.Information
                    );
                });
            });
        }
        catch (Exception ex)
        {
            Log($"\n✗ Error: {ex.Message}");
            MessageBox.Show($"Error during extraction:\n\n{ex.Message}", "Error", 
                MessageBoxButtons.OK, MessageBoxIcon.Error);
        }
        finally
        {
            btnExtract.Enabled = true;
            btnSelectPDF.Enabled = true;
            btnSelectFolder.Enabled = true;
        }
    }

    private void Log(string message)
    {
        txtLog.AppendText($"[{DateTime.Now:HH:mm:ss}] {message}\r\n");
    }

    [STAThread]
    static void Main()
    {
        Application.EnableVisualStyles();
        Application.SetCompatibleTextRenderingDefault(false);
        Application.Run(new Form1());
    }
}
```

}