// Replace the text in an existing table cell WITHOUT nuking its formatting.
// Keeps the cell's first paragraph properties and first run's RunProperties (size, font, color).
private static void SetCellText(A.Table tbl, int row1, int col1, string text)
{
    var row  = tbl.Elements<A.TableRow>().ElementAt(row1 - 1);
    var cell = row.Elements<A.TableCell>().ElementAt(col1 - 1);

    var tb = cell.TextBody ?? cell.AppendChild(new A.TextBody(new A.BodyProperties(), new A.Paragraph()));
    var firstPara = tb.GetFirstChild<A.Paragraph>();
    if (firstPara == null)
    {
        firstPara = tb.AppendChild(new A.Paragraph());
    }

    // Keep existing paragraph properties (alignment, spacing, etc.)
    var paraProps = firstPara.GetFirstChild<A.ParagraphProperties>();

    // Get/create the first run and keep its RunProperties (font size, bold, etc.)
    var firstRun = firstPara.GetFirstChild<A.Run>();
    A.RunProperties? runProps = firstRun?.RunProperties?.CloneNode(true) as A.RunProperties;

    // Clear ALL runs from the first paragraph (but keep the paragraph itself & its properties)
    firstPara.RemoveAllChildren<A.Run>();

    // Write the new text as a single run, reusing the prior RunProperties if available
    var newRun = new A.Run();
    if (runProps != null) newRun.RunProperties = runProps;
    newRun.Text = new A.Text(text ?? string.Empty);

    // Ensure paragraph still has its properties
    if (paraProps != null && firstPara.GetFirstChild<A.ParagraphProperties>() == null)
        firstPara.PrependChild(paraProps.CloneNode(true) as A.ParagraphProperties);

    firstPara.AppendChild(newRun);

    // Remove any extra paragraphs that may have been present (keeps formatting predictable)
    var extraParas = tb.Elements<A.Paragraph>().Skip(1).ToList();
    foreach (var p in extraParas) p.Remove();
}