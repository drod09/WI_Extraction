Ah, the labels aren‚Äôt persisted to the PowerPoint files themselves - they only exist in memory while the app is running. Once you close the app, the labels are lost unless you saved them to the CSV.

## **Solution: Reload Labels from Your Saved CSV**

We need to add a feature to **import labels from your existing CSV** back into the app. Add this functionality:

### **Step 1: Add ‚ÄúLoad Training Data‚Äù Button to MainWindow.xaml**

Find your buttons section and add this button:

```xml
<!-- Add this button next to your other buttons -->
<Button x:Name="btnLoadTrainingData" Content="üìÇ Load Training Data" 
        Click="BtnLoadTrainingData_Click" 
        Height="40" Width="200" Margin="5"
        Background="#673AB7" Foreground="White" FontWeight="Bold" FontSize="14"/>
```

Place it somewhere visible, like next to the ‚ÄúSave Training Data‚Äù button.

### **Step 2: Add the Import Method to MainWindow.xaml.cs**

Add these methods to your `MainWindow` class:

```csharp
private void BtnLoadTrainingData_Click(object sender, RoutedEventArgs e)
{
    var dialog = new OpenFileDialog
    {
        Filter = "CSV Files (*.csv)|*.csv",
        Title = "Select Training Data CSV to Load"
    };

    if (dialog.ShowDialog() == true)
    {
        try
        {
            LoadTrainingDataFromCSV(dialog.FileName);
            MessageBox.Show(
                $"Training data loaded successfully!\n\n" +
                $"Loaded {_allLabeledBoxes.Count} labeled text boxes",
                "Success",
                MessageBoxButton.OK,
                MessageBoxImage.Information);
            
            // Refresh display if a file is loaded
            if (_currentFile != null)
            {
                DisplaySlide(_currentSlideIndex);
            }
        }
        catch (Exception ex)
        {
            MessageBox.Show(
                $"Error loading training data:\n{ex.Message}",
                "Error",
                MessageBoxButton.OK,
                MessageBoxImage.Error);
        }
    }
}

private void LoadTrainingDataFromCSV(string filePath)
{
    _allLabeledBoxes.Clear();
    _powerPointFiles.Clear();
    
    var fileInfoDict = new Dictionary<string, PowerPointFileInfo>();
    
    using (var reader = new StreamReader(filePath))
    using (var csv = new CsvReader(reader, CultureInfo.InvariantCulture))
    {
        csv.Read();
        csv.ReadHeader();
        
        while (csv.Read())
        {
            try
            {
                string fileName = csv.GetField<string>("FileName");
                string wiNumber = csv.GetField<string>("WI_Number");
                string wiTitle = csv.GetField<string>("WI_Title");
                string revision = csv.GetField<string>("Revision");
                string bom = csv.GetField<string>("BOM_ASSY_DWG_NO");
                string opNo = csv.GetField<string>("Operation_No");
                string productLine = csv.GetField<string>("Product_Line");
                string subject = csv.GetField<string>("Subject");
                string pageNo = csv.GetField<string>("Page_No");
                string templateRev = csv.GetField<string>("Template_Rev");
                string textBoxText = csv.GetField<string>("TextBoxText");
                float left = csv.GetField<float>("Left");
                float top = csv.GetField<float>("Top");
                float width = csv.GetField<float>("Width");
                float height = csv.GetField<float>("Height");
                string revisionType = csv.GetField<string>("RevisionType");
                string label = csv.GetField<string>("Label");
                
                // Create or get file info
                if (!fileInfoDict.ContainsKey(fileName))
                {
                    fileInfoDict[fileName] = new PowerPointFileInfo
                    {
                        FileName = fileName,
                        FilePath = "", // We don't have the full path from CSV
                        IsLabeled = true,
                        IsCompleted = true,
                        ExtractedWINumber = wiNumber,
                        ExtractedTitle = wiTitle,
                        ExtractedRevision = revision,
                        ExtractedBOM = bom,
                        ExtractedOperationNo = opNo,
                        ExtractedProductLine = productLine,
                        ExtractedSubject = subject,
                        ExtractedPageNo = pageNo,
                        ExtractedTemplateRev = templateRev
                    };
                }
                
                // Create labeled text box
                _allLabeledBoxes.Add(new LabeledTextBox
                {
                    Text = textBoxText,
                    Left = left,
                    Top = top,
                    Width = width,
                    Height = height,
                    RevisionType = revisionType,
                    SourceFile = fileName, // Use filename as identifier
                    SlideNumber = 1,
                    AssignedLabel = label,
                    IsHidden = false
                });
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error reading CSV row: {ex.Message}");
            }
        }
    }
    
    // Add all file infos to the list
    _powerPointFiles.AddRange(fileInfoDict.Values);
    
    // Update the file list
    lstFiles.Items.Clear();
    foreach (var file in _powerPointFiles)
    {
        lstFiles.Items.Add(file);
    }
    
    UpdateProgress();
    
    Console.WriteLine($"Loaded {_allLabeledBoxes.Count} labeled boxes from {_powerPointFiles.Count} files");
}
```

### **Step 3: Use It**

Now you can:

1. **Run** WorkInstructionLabeler
1. Click **‚ÄúüìÇ Load Training Data‚Äù**
1. Select your existing CSV file (e.g., `training_data_with_values.csv`)
1. Click **Open**
1. Your labels are now loaded back into memory!
1. Click **‚Äúüíæ Save Training Data‚Äù** to re-export with the fixed format
1. Click **‚Äúüéì Train Model‚Äù** to train

-----

## **Quick Workflow:**

```
1. Click "üìÇ Load Training Data" ‚Üí Select your old CSV
2. Click "üíæ Save Training Data" ‚Üí Save as "training_data_fixed.csv"
3. Click "üéì Train Model" ‚Üí Yes ‚Üí Select "training_data_fixed.csv"
4. Done!
```

This way you don‚Äôt lose your labeling work! The new CSV will have proper escaping and the training should work.

Let me know once you‚Äôve added the button and tried loading your data! üéØ‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã