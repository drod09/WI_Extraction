// Get slide #N (1-based)
private static SlidePart GetSlideByIndex(PresentationDocument doc, int oneBasedIndex)
{
    var sldId = doc.PresentationPart.Presentation.SlideIdList.Elements<P.SlideId>().ElementAt(oneBasedIndex - 1);
    return (SlidePart)doc.PresentationPart.GetPartById(sldId.RelationshipId);
}

// Read concatenated text from a table cell
private static string GetCellText(A.Table tbl, int row1, int col1)
{
    var row = tbl.Elements<A.TableRow>().ElementAt(row1 - 1);
    var cell = row.Elements<A.TableCell>().ElementAt(col1 - 1);
    return string.Join(" ", cell.Descendants<A.Text>().Select(t => t.Text ?? "").Where(s => !string.IsNullOrWhiteSpace(s))).Trim();
}

// Set text of an existing cell
private static void SetCellText(A.Table tbl, int row1, int col1, string text)
{
    var row = tbl.Elements<A.TableRow>().ElementAt(row1 - 1);
    var cell = row.Elements<A.TableCell>().ElementAt(col1 - 1);
    var tb = cell.TextBody;
    tb.RemoveAllChildren<A.Paragraph>();
    tb.AppendChild(new A.Paragraph(new A.Run(new A.Text(text ?? ""))));
    tb.AppendChild(new A.Paragraph()); // required end para
}

// Title string from first row (helps identify which table is which)
private static string GetTableTitle(A.Table tbl)
{
    if (!tbl.Elements<A.TableRow>().Any()) return "";
    var firstRow = tbl.Elements<A.TableRow>().First();
    var firstRowText = string.Join(" ", firstRow.Descendants<A.Text>().Select(t => t.Text ?? "")).Trim();
    return firstRowText?.ToUpperInvariant() ?? "";
}

// All tables on a slide (in the order PPT stores them)
private static List<A.Table> GetTables(SlidePart sp) =>
    sp.Slide.Descendants<A.Table>().ToList();

// Try to find by title; else fallback by index (1-based)
private static A.Table FindTable(SlidePart sp, string titleContainsUpper, int fallbackIndex)
{
    var tables = GetTables(sp);
    var byTitle = tables.FirstOrDefault(t => GetTableTitle(t).Contains(titleContainsUpper));
    if (byTitle != null) return byTitle;
    return (fallbackIndex >= 1 && fallbackIndex <= tables.Count) ? tables[fallbackIndex - 1] : null;
}


// BOM / CONFIGURATION TABLE
// - Row 1: big title
// - Row 2: column headers ("Part Number", "Description")
// - Data starts at Row 3.
// - We write only up to available data rows & table rows.
private static void FillBom(SlidePart s1, DataTable bom)
{
    if (bom == null) return;
    var tbl = FindTable(s1, "BOM / CONFIGURATION", 1);
    if (tbl == null) return;

    var rows = tbl.Elements<A.TableRow>().ToList();
    if (rows.Count < 3) return; // need at least title+headers+1 data row

    int dataStartRow = 3;                 // first writable row in template
    int maxTableRows = rows.Count;        // last writable row index
    int maxWrite = Math.Min(bom.Rows.Count, maxTableRows - (dataStartRow - 1));

    // Optional: blank out existing data rows before writing
    for (int r = dataStartRow; r <= maxTableRows; r++)
    {
        SetCellText(tbl, r, 1, ""); // Part Number
        SetCellText(tbl, r, 2, ""); // Description
    }

    for (int i = 0; i < maxWrite; i++)
    {
        var src = bom.Rows[i];
        SetCellText(tbl, dataStartRow + i, 1, src.Table.Columns.Contains("PartNumber") ? src["PartNumber"]?.ToString() : "");
        SetCellText(tbl, dataStartRow + i, 2, src.Table.Columns.Contains("Description") ? src["Description"]?.ToString() : "");
    }
}

// REVISION HISTORY
// - Row 1: title
// - Row 2: headers ("Rev.", "Description of Change", "Date")
// - Data starts at Row 3.
private static void FillRevisionHistory(SlidePart s1, DataTable rev)
{
    if (rev == null) return;
    var tbl = FindTable(s1, "REVISION HISTORY", 2);
    if (tbl == null) return;

    var rows = tbl.Elements<A.TableRow>().ToList();
    if (rows.Count < 3) return;

    int dataStartRow = 3;
    int maxTableRows = rows.Count;
    int maxWrite = Math.Min(rev.Rows.Count, maxTableRows - (dataStartRow - 1));

    // Clear old data cells
    for (int r = dataStartRow; r <= maxTableRows; r++)
    {
        SetCellText(tbl, r, 1, ""); // Rev
        SetCellText(tbl, r, 2, ""); // Description
        SetCellText(tbl, r, 3, ""); // Date
    }

    for (int i = 0; i < maxWrite; i++)
    {
        var src = rev.Rows[i];
        SetCellText(tbl, dataStartRow + i, 1, GetOr(src, "RevNumber"));
        SetCellText(tbl, dataStartRow + i, 2, GetOr(src, "ChangeDescription"));
        SetCellText(tbl, dataStartRow + i, 3, GetOr(src, "ChangeDate"));
    }

    static string GetOr(DataRow r, string col) => r.Table.Columns.Contains(col) ? r[col]?.ToString() : "";
}

// DRAFTING (fixed 3 rows):
// - Row 1: headers ("Drafting", "Signatures", "Date")
// - Row 2: left cell already "Author" → write Signature (col 2) & Date (col 3)
// - Row 3: left cell already "Updated by" → write Signature (col 2) & Date (col 3)
private static void FillDrafting(SlidePart s1, DataTable drafting)
{
    if (drafting == null) return;
    var tbl = FindTable(s1, "DRAFTING", 3);
    if (tbl == null) return;

    // Build lookup by Role (upper)
    var dict = drafting.AsEnumerable()
        .GroupBy(r => (r.Table.Columns.Contains("Role") ? (r["Role"]?.ToString() ?? "") : "").ToUpperInvariant())
        .ToDictionary(g => g.Key, g => g.First());

    // Row 2: Author
    if (tbl.Elements<A.TableRow>().Count() >= 2)
    {
        if (dict.TryGetValue("AUTHOR", out var r2))
        {
            SetCellText(tbl, 2, 2, drafting.Columns.Contains("Signature") ? r2["Signature"]?.ToString() : "");
            SetCellText(tbl, 2, 3, drafting.Columns.Contains("SignatureDate") ? r2["SignatureDate"]?.ToString() : "");
        }
        else { SetCellText(tbl, 2, 2, ""); SetCellText(tbl, 2, 3, ""); }
    }

    // Row 3: Updated by
    if (tbl.Elements<A.TableRow>().Count() >= 3)
    {
        if (dict.TryGetValue("UPDATED BY", out var r3))
        {
            SetCellText(tbl, 3, 2, drafting.Columns.Contains("Signature") ? r3["Signature"]?.ToString() : "");
            SetCellText(tbl, 3, 3, drafting.Columns.Contains("SignatureDate") ? r3["SignatureDate"]?.ToString() : "");
        }
        else { SetCellText(tbl, 3, 2, ""); SetCellText(tbl, 3, 3, ""); }
    }
}

// APPROVALS (fixed labels):
// - Row 1: headers ("Approvals", "Signatures", "Date")
// - Rows 2..6 left column already have: 
//   "Mfg Engineering", "Operations", "Quality Assurance", "Engineering", "Additional"
// - We only fill Signature & Date for each row label.
private static void FillApprovals(SlidePart s1, DataTable approvals)
{
    if (approvals == null) return;
    var tbl = FindTable(s1, "APPROVALS", 4);
    if (tbl == null) return;

    // Map by Department (upper)
    var rowsByDept = approvals.AsEnumerable()
        .GroupBy(r => (r.Table.Columns.Contains("Department") ? (r["Department"]?.ToString() ?? "") : "").ToUpperInvariant())
        .ToDictionary(g => g.Key, g => g.First());

    // A helper to write a row if present, else blank
    void Write(string labelUpper, int rowIndex)
    {
        if (rowsByDept.TryGetValue(labelUpper, out var rr))
        {
            SetCellText(tbl, rowIndex, 2, approvals.Columns.Contains("Signature") ? rr["Signature"]?.ToString() : "");
            SetCellText(tbl, rowIndex, 3, approvals.Columns.Contains("SignatureDate") ? rr["SignatureDate"]?.ToString() : "");
        }
        else { SetCellText(tbl, rowIndex, 2, ""); SetCellText(tbl, rowIndex, 3, ""); }
    }

    // Row indices (assuming template row 1 = headers):
    Write("MFG ENGINEERING",     2);
    Write("OPERATIONS",          3);
    Write("QUALITY ASSURANCE",   4);
    Write("ENGINEERING",         5);
    Write("ADDITIONAL",          6);
}





// Slide 1 — Title + four existing tables
var s1 = GetSlideByIndex(doc, 1);
SetShapeText(GetTitleShape(s1), $"{payload.WiNumber} — {payload.Title}");

// (Optional) IPE / ER / ECO small fields: target by known shape or seed text if you have them
// SetShapeText(FindShapeByContainsText(s1, "IPE"), payload.IPE);
// SetShapeText(FindShapeByContainsText(s1, "ER"),  payload.ER);
// SetShapeText(FindShapeByContainsText(s1, "ECO"), payload.ECO);

// Fill the tables WITHOUT changing titles/headers/labels
FillBom(s1, payload.BomConfiguration);
FillRevisionHistory(s1, payload.RevisionHistory);
FillDrafting(s1, payload.Drafting);
FillApprovals(s1, payload.Approvals);



