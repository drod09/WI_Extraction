using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace WorkInstructionExtractor
{
    public partial class Form1 : Form
    {
        private BackgroundWorker backgroundWorker;
        private bool isSingleFileMode = true;

        public Form1()
        {
            InitializeComponent();
            InitializeBackgroundWorker();
        }

        private void InitializeBackgroundWorker()
        {
            backgroundWorker = new BackgroundWorker
            {
                WorkerReportsProgress = true,
                WorkerSupportsCancellation = true
            };

            backgroundWorker.DoWork += BackgroundWorker_DoWork;
            backgroundWorker.ProgressChanged += BackgroundWorker_ProgressChanged;
            backgroundWorker.RunWorkerCompleted += BackgroundWorker_RunWorkerCompleted;
        }

        private void rbSingleFile_CheckedChanged(object sender, EventArgs e)
        {
            if (rbSingleFile.Checked)
            {
                isSingleFileMode = true;
                btnSelectFile.Visible = true;
                btnSelectFolder.Visible = false;
                txtPowerPointPath.Text = "";
                lblFileCount.Text = "";
                label1.Text = "Input File:";
                LogMessage("Mode: Single File Processing");
            }
        }

        private void rbBulkFolder_CheckedChanged(object sender, EventArgs e)
        {
            if (rbBulkFolder.Checked)
            {
                isSingleFileMode = false;
                btnSelectFile.Visible = false;
                btnSelectFolder.Visible = true;
                txtPowerPointPath.Text = "";
                lblFileCount.Text = "";
                label1.Text = "Input Folder:";
                LogMessage("Mode: Bulk Folder Processing");
            }
        }

        private void btnSelectFile_Click(object sender, EventArgs e)
        {
            using (OpenFileDialog openFileDialog = new OpenFileDialog())
            {
                openFileDialog.Filter = "PowerPoint Files (*.pptx;*.ppt)|*.pptx;*.ppt|All Files (*.*)|*.*";
                openFileDialog.Title = "Select PowerPoint Work Instruction";

                if (openFileDialog.ShowDialog() == DialogResult.OK)
                {
                    txtPowerPointPath.Text = openFileDialog.FileName;
                    lblFileCount.Text = "";
                    LogMessage($"Selected file: {Path.GetFileName(openFileDialog.FileName)}");
                    
                    // Auto-set output folder to same directory as input file
                    if (string.IsNullOrEmpty(txtOutputFolder.Text))
                    {
                        string autoOutputFolder = Path.GetDirectoryName(openFileDialog.FileName);
                        txtOutputFolder.Text = autoOutputFolder;
                        LogMessage($"Auto-set output folder: {autoOutputFolder}");
                    }
                }
            }
        }

        private void btnSelectFolder_Click(object sender, EventArgs e)
        {
            using (FolderBrowserDialog folderDialog = new FolderBrowserDialog())
            {
                folderDialog.Description = "Select Folder Containing PowerPoint Files";

                if (folderDialog.ShowDialog() == DialogResult.OK)
                {
                    txtPowerPointPath.Text = folderDialog.SelectedPath;
                    
                    // Count .pptx and .ppt files in folder
                    string[] files = Directory.GetFiles(folderDialog.SelectedPath, "*.ppt*")
                        .Where(f => !Path.GetFileName(f).StartsWith("~$"))
                        .ToArray();
                    
                    lblFileCount.Text = $"({files.Length} PowerPoint file{(files.Length != 1 ? "s" : "")} found)";
                    lblFileCount.ForeColor = files.Length > 0 ? Color.DarkGreen : Color.Red;
                    
                    LogMessage($"Selected folder: {folderDialog.SelectedPath}");
                    LogMessage($"Found {files.Length} PowerPoint file(s)");
                    
                    // Auto-set output folder to same directory
                    if (string.IsNullOrEmpty(txtOutputFolder.Text))
                    {
                        txtOutputFolder.Text = folderDialog.SelectedPath;
                        LogMessage($"Auto-set output folder: {folderDialog.SelectedPath}");
                    }
                }
            }
        }

        private void btnSelectOutputFolder_Click(object sender, EventArgs e)
        {
            using (FolderBrowserDialog folderDialog = new FolderBrowserDialog())
            {
                folderDialog.Description = "Select Output Folder";

                if (folderDialog.ShowDialog() == DialogResult.OK)
                {
                    txtOutputFolder.Text = folderDialog.SelectedPath;
                    LogMessage($"Output folder: {folderDialog.SelectedPath}");
                }
            }
        }

        private void btnExtract_Click(object sender, EventArgs e)
        {
            // Validation
            if (string.IsNullOrWhiteSpace(txtPowerPointPath.Text))
            {
                MessageBox.Show(
                    isSingleFileMode ? 
                    "Please select a PowerPoint file." : 
                    "Please select a folder containing PowerPoint files.", 
                    "Validation Error",
                    MessageBoxButtons.OK, 
                    MessageBoxIcon.Warning);
                return;
            }

            if (string.IsNullOrWhiteSpace(txtOutputFolder.Text))
            {
                MessageBox.Show("Please select an output folder.", "Validation Error",
                    MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            // Additional validation for folder mode
            if (!isSingleFileMode)
            {
                string[] files = Directory.GetFiles(txtPowerPointPath.Text, "*.ppt*")
                    .Where(f => !Path.GetFileName(f).StartsWith("~$"))
                    .ToArray();
                
                if (files.Length == 0)
                {
                    MessageBox.Show("No PowerPoint files found in the selected folder.", 
                        "Validation Error",
                        MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return;
                }
            }

            // Disable UI during processing
            SetUIEnabled(false);
            txtLog.Clear();
            progressBar.Value = 0;

            // Start background processing
            var workData = new ExtractionWorkData
            {
                InputPath = txtPowerPointPath.Text,
                OutputFolder = txtOutputFolder.Text,
                IsSingleFile = isSingleFileMode
            };

            LogMessage("=".PadRight(60, '='));
            LogMessage("STARTING EXTRACTION PROCESS");
            LogMessage("=".PadRight(60, '='));

            backgroundWorker.RunWorkerAsync(workData);
        }

        private void BackgroundWorker_DoWork(object sender, DoWorkEventArgs e)
        {
            var worker = sender as BackgroundWorker;
            var data = e.Argument as ExtractionWorkData;

            try
            {
                if (data.IsSingleFile)
                {
                    // Process single file
                    e.Result = ProcessSingleFile(worker, data);
                }
                else
                {
                    // Process multiple files
                    e.Result = ProcessMultipleFiles(worker, data);
                }
            }
            catch (Exception ex)
            {
                e.Result = new ExtractionResultWrapper
                {
                    Success = false,
                    ErrorMessage = ex.Message,
                    StackTrace = ex.StackTrace
                };
            }
        }

        private ExtractionResultWrapper ProcessSingleFile(BackgroundWorker worker, ExtractionWorkData data)
        {
            worker.ReportProgress(5, "Processing single file...");

            string fileName = Path.GetFileNameWithoutExtension(data.InputPath);
            
            // Create output subfolder with timestamp
            string timestamp = DateTime.Now.ToString("yyyyMMdd_HHmmss");
            string outputSubFolder = Path.Combine(data.OutputFolder, $"ExtractedData_{fileName}_{timestamp}");
            Directory.CreateDirectory(outputSubFolder);

            worker.ReportProgress(10, $"Extracting: {Path.GetFileName(data.InputPath)}");

            var extractor = new PowerPointExtractor();
            var extractResult = extractor.ExtractWorkInstruction(
                data.InputPath,
                outputSubFolder,
                (progress, message) => worker.ReportProgress(progress, message)
            );

            worker.ReportProgress(100, "Extraction complete!");
            
            return new ExtractionResultWrapper
            {
                Success = true,
                ExcelPath = extractResult.ExcelPath,
                OutputFolder = outputSubFolder,
                ProcessedCount = 1,
                FailedCount = 0
            };
        }

        private ExtractionResultWrapper ProcessMultipleFiles(BackgroundWorker worker, ExtractionWorkData data)
        {
            worker.ReportProgress(5, "Scanning for PowerPoint files...");

            string[] files = Directory.GetFiles(data.InputPath, "*.ppt*")
                .Where(f => !Path.GetFileName(f).StartsWith("~$"))
                .ToArray();

            worker.ReportProgress(10, $"Found {files.Length} file(s) to process");

            // Create main output folder with timestamp
            string timestamp = DateTime.Now.ToString("yyyyMMdd_HHmmss");
            string mainOutputFolder = Path.Combine(data.OutputFolder, $"ExtractedData_Bulk_{timestamp}");
            Directory.CreateDirectory(mainOutputFolder);

            int successCount = 0;
            var failures = new List<(string fileName, string error)>();

            var extractor = new PowerPointExtractor();

            for (int i = 0; i < files.Length; i++)
            {
                string file = files[i];
                string fileName = Path.GetFileName(file);
                
                try
                {
                    int baseProgress = 10 + (i * 80 / files.Length);
                    worker.ReportProgress(baseProgress, $"Processing {i + 1}/{files.Length}: {fileName}");

                    // Create subfolder for each file
                    string fileOutputFolder = Path.Combine(mainOutputFolder, Path.GetFileNameWithoutExtension(fileName));
                    Directory.CreateDirectory(fileOutputFolder);

                    var extractResult = extractor.ExtractWorkInstruction(
                        file,
                        fileOutputFolder,
                        (progress, message) => 
                        {
                            // Scale progress to current file's portion
                            int scaledProgress = baseProgress + (progress * 80 / files.Length / 100);
                            worker.ReportProgress(scaledProgress, $"[{i + 1}/{files.Length}] {message}");
                        }
                    );

                    successCount++;
                    worker.ReportProgress(baseProgress + (80 / files.Length), $"✓ Completed: {fileName}");
                }
                catch (Exception ex)
                {
                    failures.Add((fileName, ex.Message));
                    worker.ReportProgress(0, $"✗ Failed: {fileName} - {ex.Message}");
                }
            }

            worker.ReportProgress(95, "Creating summary report...");

            // Create summary report
            CreateSummaryReport(mainOutputFolder, files.Length, successCount, failures);

            worker.ReportProgress(100, $"Bulk processing complete! {successCount}/{files.Length} succeeded");

            return new ExtractionResultWrapper
            {
                Success = true,
                OutputFolder = mainOutputFolder,
                ProcessedCount = successCount,
                FailedCount = failures.Count,
                Failures = failures,
                IsBulk = true
            };
        }

        private void CreateSummaryReport(string outputFolder, int totalFiles, int successCount, List<(string fileName, string error)> failures)
        {
            string summaryPath = Path.Combine(outputFolder, "EXTRACTION_SUMMARY.txt");
            
            using (StreamWriter writer = new StreamWriter(summaryPath))
            {
                writer.WriteLine("=".PadRight(80, '='));
                writer.WriteLine("WORK INSTRUCTION EXTRACTION SUMMARY");
                writer.WriteLine("=".PadRight(80, '='));
                writer.WriteLine();
                writer.WriteLine($"Extraction Date: {DateTime.Now:yyyy-MM-dd HH:mm:ss}");
                writer.WriteLine($"Total Files Found: {totalFiles}");
                writer.WriteLine($"Successfully Processed: {successCount}");
                writer.WriteLine($"Failed: {failures.Count}");
                writer.WriteLine($"Success Rate: {(successCount * 100.0 / totalFiles):F1}%");
                writer.WriteLine();

                if (failures.Count > 0)
                {
                    writer.WriteLine("=".PadRight(80, '='));
                    writer.WriteLine("FAILED FILES");
                    writer.WriteLine("=".PadRight(80, '='));
                    writer.WriteLine();

                    foreach (var (fileName, error) in failures)
                    {
                        writer.WriteLine($"File: {fileName}");
                        writer.WriteLine($"Error: {error}");
                        writer.WriteLine();
                    }
                }

                writer.WriteLine("=".PadRight(80, '='));
                writer.WriteLine("OUTPUT STRUCTURE");
                writer.WriteLine("=".PadRight(80, '='));
                writer.WriteLine();
                writer.WriteLine("Each successfully processed file has a subfolder containing:");
                writer.WriteLine("  - Extracted_Data.xlsx (all extracted data)");
                writer.WriteLine("  - BaseImages/ (individual images)");
                writer.WriteLine("  - ComposedImages/ (grouped images)");
                writer.WriteLine();
            }
        }

        private void BackgroundWorker_ProgressChanged(object sender, ProgressChangedEventArgs e)
        {
            progressBar.Value = Math.Min(e.ProgressPercentage, 100);
            lblStatus.Text = e.UserState?.ToString() ?? "Processing...";
            
            if (!string.IsNullOrEmpty(e.UserState?.ToString()))
            {
                LogMessage(e.UserState.ToString());
            }
        }

        private void BackgroundWorker_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            SetUIEnabled(true);

            var result = e.Result as ExtractionResultWrapper;

            if (result != null && result.Success)
            {
                LogMessage("");
                LogMessage("=".PadRight(60, '='));
                
                if (result.IsBulk)
                {
                    LogMessage($"✓ BULK EXTRACTION COMPLETED!", Color.Green);
                    LogMessage($"  Successfully processed: {result.ProcessedCount} file(s)", Color.Green);
                    
                    if (result.FailedCount > 0)
                    {
                        LogMessage($"  Failed: {result.FailedCount} file(s)", Color.Red);
                    }
                    
                    LogMessage("");
                    LogMessage($"Output location: {result.OutputFolder}");
                    
                    var message = $"Bulk extraction completed!\n\n" +
                                  $"Successfully processed: {result.ProcessedCount}\n" +
                                  $"Failed: {result.FailedCount}\n\n" +
                                  $"Output folder: {result.OutputFolder}\n\n" +
                                  $"A summary report has been created.";

                    var openFolder = MessageBox.Show(
                        message + "\n\nWould you like to open the output folder?",
                        "Bulk Extraction Complete",
                        MessageBoxButtons.YesNo,
                        MessageBoxIcon.Information
                    );

                    if (openFolder == DialogResult.Yes)
                    {
                        System.Diagnostics.Process.Start("explorer.exe", result.OutputFolder);
                    }
                }
                else
                {
                    LogMessage("✓ EXTRACTION COMPLETED SUCCESSFULLY!", Color.Green);
                    LogMessage($"  Excel file: {Path.GetFileName(result.ExcelPath)}", Color.Green);
                    LogMessage($"  Output folder: {result.OutputFolder}");

                    var message = $"Data extracted successfully!\n\n" +
                                  $"Excel file: {Path.GetFileName(result.ExcelPath)}\n" +
                                  $"Output folder: {result.OutputFolder}";

                    var openFolder = MessageBox.Show(
                        message + "\n\nWould you like to open the output folder?",
                        "Extraction Complete",
                        MessageBoxButtons.YesNo,
                        MessageBoxIcon.Information
                    );

                    if (openFolder == DialogResult.Yes)
                    {
                        System.Diagnostics.Process.Start("explorer.exe", result.OutputFolder);
                    }
                }
                
                LogMessage("=".PadRight(60, '='));
            }
            else if (result != null && !result.Success)
            {
                LogMessage("");
                LogMessage("=".PadRight(60, '='));
                LogMessage($"✗ ERROR OCCURRED", Color.Red);
                LogMessage($"  {result.ErrorMessage}", Color.Red);
                LogMessage("=".PadRight(60, '='));
                
                MessageBox.Show($"An error occurred during extraction:\n\n{result.ErrorMessage}",
                    "Extraction Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void SetUIEnabled(bool enabled)
        {
            btnSelectFile.Enabled = enabled;
            btnSelectFolder.Enabled = enabled;
            btnSelectOutputFolder.Enabled = enabled;
            btnExtract.Enabled = enabled;
            rbSingleFile.Enabled = enabled;
            rbBulkFolder.Enabled = enabled;
        }

        private void LogMessage(string message, Color? color = null)
        {
            if (txtLog.InvokeRequired)
            {
                txtLog.Invoke(new Action(() => LogMessage(message, color)));
                return;
            }

            txtLog.SelectionStart = txtLog.TextLength;
            txtLog.SelectionLength = 0;
            txtLog.SelectionColor = color ?? Color.Black;
            txtLog.AppendText($"[{DateTime.Now:HH:mm:ss}] {message}\n");
            txtLog.SelectionColor = txtLog.ForeColor;
            txtLog.ScrollToCaret();
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            LogMessage("Work Instruction Data Extractor ready.");
            LogMessage("Select a single file or folder, then click 'Extract Data' to begin.");
        }
    }

    // Helper classes
    public class ExtractionWorkData
    {
        public string InputPath { get; set; }
        public string OutputFolder { get; set; }
        public bool IsSingleFile { get; set; }
    }

    public class ExtractionResultWrapper
    {
        public bool Success { get; set; }
        public string ExcelPath { get; set; }
        public string OutputFolder { get; set; }
        public string ErrorMessage { get; set; }
        public string StackTrace { get; set; }
        public int ProcessedCount { get; set; }
        public int FailedCount { get; set; }
        public List<(string fileName, string error)> Failures { get; set; } = new List<(string, string)>();
        public bool IsBulk { get; set; }
    }
}
-----------
namespace WorkInstructionExtractor
{
    partial class Form1
    {
        private System.ComponentModel.IContainer components = null;

        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        private void InitializeComponent()
        {
            this.txtPowerPointPath = new System.Windows.Forms.TextBox();
            this.txtOutputFolder = new System.Windows.Forms.TextBox();
            this.btnSelectFile = new System.Windows.Forms.Button();
            this.btnSelectFolder = new System.Windows.Forms.Button();
            this.btnSelectOutputFolder = new System.Windows.Forms.Button();
            this.btnExtract = new System.Windows.Forms.Button();
            this.progressBar = new System.Windows.Forms.ProgressBar();
            this.txtLog = new System.Windows.Forms.RichTextBox();
            this.lblStatus = new System.Windows.Forms.Label();
            this.label1 = new System.Windows.Forms.Label();
            this.label2 = new System.Windows.Forms.Label();
            this.label3 = new System.Windows.Forms.Label();
            this.groupBox1 = new System.Windows.Forms.GroupBox();
            this.rbSingleFile = new System.Windows.Forms.RadioButton();
            this.rbBulkFolder = new System.Windows.Forms.RadioButton();
            this.groupBox2 = new System.Windows.Forms.GroupBox();
            this.groupBox3 = new System.Windows.Forms.GroupBox();
            this.label4 = new System.Windows.Forms.Label();
            this.lblFileCount = new System.Windows.Forms.Label();
            this.groupBox1.SuspendLayout();
            this.groupBox2.SuspendLayout();
            this.groupBox3.SuspendLayout();
            this.SuspendLayout();
            // 
            // txtPowerPointPath
            // 
            this.txtPowerPointPath.Location = new System.Drawing.Point(150, 60);
            this.txtPowerPointPath.Name = "txtPowerPointPath";
            this.txtPowerPointPath.ReadOnly = true;
            this.txtPowerPointPath.Size = new System.Drawing.Size(550, 22);
            this.txtPowerPointPath.TabIndex = 0;
            // 
            // txtOutputFolder
            // 
            this.txtOutputFolder.Location = new System.Drawing.Point(150, 95);
            this.txtOutputFolder.Name = "txtOutputFolder";
            this.txtOutputFolder.ReadOnly = true;
            this.txtOutputFolder.Size = new System.Drawing.Size(550, 22);
            this.txtOutputFolder.TabIndex = 2;
            // 
            // btnSelectFile
            // 
            this.btnSelectFile.Location = new System.Drawing.Point(720, 58);
            this.btnSelectFile.Name = "btnSelectFile";
            this.btnSelectFile.Size = new System.Drawing.Size(100, 26);
            this.btnSelectFile.TabIndex = 3;
            this.btnSelectFile.Text = "Browse...";
            this.btnSelectFile.UseVisualStyleBackColor = true;
            this.btnSelectFile.Click += new System.EventHandler(this.btnSelectFile_Click);
            // 
            // btnSelectFolder
            // 
            this.btnSelectFolder.Location = new System.Drawing.Point(720, 58);
            this.btnSelectFolder.Name = "btnSelectFolder";
            this.btnSelectFolder.Size = new System.Drawing.Size(100, 26);
            this.btnSelectFolder.TabIndex = 4;
            this.btnSelectFolder.Text = "Browse...";
            this.btnSelectFolder.UseVisualStyleBackColor = true;
            this.btnSelectFolder.Visible = false;
            this.btnSelectFolder.Click += new System.EventHandler(this.btnSelectFolder_Click);
            // 
            // btnSelectOutputFolder
            // 
            this.btnSelectOutputFolder.Location = new System.Drawing.Point(720, 93);
            this.btnSelectOutputFolder.Name = "btnSelectOutputFolder";
            this.btnSelectOutputFolder.Size = new System.Drawing.Size(100, 26);
            this.btnSelectOutputFolder.TabIndex = 5;
            this.btnSelectOutputFolder.Text = "Browse...";
            this.btnSelectOutputFolder.UseVisualStyleBackColor = true;
            this.btnSelectOutputFolder.Click += new System.EventHandler(this.btnSelectOutputFolder_Click);
            // 
            // btnExtract
            // 
            this.btnExtract.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0)))), ((int)(((byte)(120)))), ((int)(((byte)(215)))));
            this.btnExtract.FlatAppearance.BorderSize = 0;
            this.btnExtract.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
            this.btnExtract.Font = new System.Drawing.Font("Segoe UI", 10F, System.Drawing.FontStyle.Bold);
            this.btnExtract.ForeColor = System.Drawing.Color.White;
            this.btnExtract.Location = new System.Drawing.Point(310, 200);
            this.btnExtract.Name = "btnExtract";
            this.btnExtract.Size = new System.Drawing.Size(250, 45);
            this.btnExtract.TabIndex = 6;
            this.btnExtract.Text = "Extract Data";
            this.btnExtract.UseVisualStyleBackColor = false;
            this.btnExtract.Click += new System.EventHandler(this.btnExtract_Click);
            // 
            // progressBar
            // 
            this.progressBar.Location = new System.Drawing.Point(20, 260);
            this.progressBar.Name = "progressBar";
            this.progressBar.Size = new System.Drawing.Size(840, 30);
            this.progressBar.TabIndex = 7;
            // 
            // txtLog
            // 
            this.txtLog.BackColor = System.Drawing.Color.White;
            this.txtLog.Dock = System.Windows.Forms.DockStyle.Fill;
            this.txtLog.Font = new System.Drawing.Font("Consolas", 9F);
            this.txtLog.Location = new System.Drawing.Point(3, 18);
            this.txtLog.Name = "txtLog";
            this.txtLog.ReadOnly = true;
            this.txtLog.Size = new System.Drawing.Size(834, 239);
            this.txtLog.TabIndex = 8;
            this.txtLog.Text = "";
            // 
            // lblStatus
            // 
            this.lblStatus.Font = new System.Drawing.Font("Segoe UI", 9F);
            this.lblStatus.Location = new System.Drawing.Point(20, 300);
            this.lblStatus.Name = "lblStatus";
            this.lblStatus.Size = new System.Drawing.Size(840, 20);
            this.lblStatus.TabIndex = 10;
            this.lblStatus.Text = "Ready";
            this.lblStatus.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
            // 
            // label1
            // 
            this.label1.AutoSize = true;
            this.label1.Location = new System.Drawing.Point(20, 63);
            this.label1.Name = "label1";
            this.label1.Size = new System.Drawing.Size(95, 16);
            this.label1.TabIndex = 13;
            this.label1.Text = "Input File/Folder:";
            // 
            // label2
            // 
            this.label2.AutoSize = true;
            this.label2.Location = new System.Drawing.Point(20, 30);
            this.label2.Name = "label2";
            this.label2.Size = new System.Drawing.Size(95, 16);
            this.label2.TabIndex = 14;
            this.label2.Text = "Processing Mode:";
            // 
            // label3
            // 
            this.label3.AutoSize = true;
            this.label3.Location = new System.Drawing.Point(20, 98);
            this.label3.Name = "label3";
            this.label3.Size = new System.Drawing.Size(93, 16);
            this.label3.TabIndex = 15;
            this.label3.Text = "Output Folder:";
            // 
            // groupBox1
            // 
            this.groupBox1.Controls.Add(this.lblFileCount);
            this.groupBox1.Controls.Add(this.rbBulkFolder);
            this.groupBox1.Controls.Add(this.rbSingleFile);
            this.groupBox1.Controls.Add(this.label2);
            this.groupBox1.Controls.Add(this.label1);
            this.groupBox1.Controls.Add(this.label3);
            this.groupBox1.Controls.Add(this.txtPowerPointPath);
            this.groupBox1.Controls.Add(this.txtOutputFolder);
            this.groupBox1.Controls.Add(this.btnSelectFile);
            this.groupBox1.Controls.Add(this.btnSelectFolder);
            this.groupBox1.Controls.Add(this.btnSelectOutputFolder);
            this.groupBox1.Location = new System.Drawing.Point(20, 70);
            this.groupBox1.Name = "groupBox1";
            this.groupBox1.Size = new System.Drawing.Size(840, 135);
            this.groupBox1.TabIndex = 16;
            this.groupBox1.TabStop = false;
            this.groupBox1.Text = "Input Configuration";
            // 
            // rbSingleFile
            // 
            this.rbSingleFile.AutoSize = true;
            this.rbSingleFile.Checked = true;
            this.rbSingleFile.Location = new System.Drawing.Point(150, 28);
            this.rbSingleFile.Name = "rbSingleFile";
            this.rbSingleFile.Size = new System.Drawing.Size(85, 20);
            this.rbSingleFile.TabIndex = 16;
            this.rbSingleFile.TabStop = true;
            this.rbSingleFile.Text = "Single File";
            this.rbSingleFile.UseVisualStyleBackColor = true;
            this.rbSingleFile.CheckedChanged += new System.EventHandler(this.rbSingleFile_CheckedChanged);
            // 
            // rbBulkFolder
            // 
            this.rbBulkFolder.AutoSize = true;
            this.rbBulkFolder.Location = new System.Drawing.Point(260, 28);
            this.rbBulkFolder.Name = "rbBulkFolder";
            this.rbBulkFolder.Size = new System.Drawing.Size(156, 20);
            this.rbBulkFolder.TabIndex = 17;
            this.rbBulkFolder.Text = "Bulk Process (Folder)";
            this.rbBulkFolder.UseVisualStyleBackColor = true;
            this.rbBulkFolder.CheckedChanged += new System.EventHandler(this.rbBulkFolder_CheckedChanged);
            // 
            // lblFileCount
            // 
            this.lblFileCount.AutoSize = true;
            this.lblFileCount.Font = new System.Drawing.Font("Segoe UI", 9F, System.Drawing.FontStyle.Italic);
            this.lblFileCount.ForeColor = System.Drawing.Color.DarkGreen;
            this.lblFileCount.Location = new System.Drawing.Point(440, 30);
            this.lblFileCount.Name = "lblFileCount";
            this.lblFileCount.Size = new System.Drawing.Size(0, 15);
            this.lblFileCount.TabIndex = 18;
            // 
            // groupBox2
            // 
            this.groupBox2.Controls.Add(this.btnExtract);
            this.groupBox2.Controls.Add(this.progressBar);
            this.groupBox2.Controls.Add(this.lblStatus);
            this.groupBox2.Location = new System.Drawing.Point(20, 210);
            this.groupBox2.Name = "groupBox2";
            this.groupBox2.Size = new System.Drawing.Size(840, 120);
            this.groupBox2.TabIndex = 17;
            this.groupBox2.TabStop = false;
            this.groupBox2.Text = "Extraction Progress";
            // 
            // groupBox3
            // 
            this.groupBox3.Controls.Add(this.txtLog);
            this.groupBox3.Location = new System.Drawing.Point(20, 340);
            this.groupBox3.Name = "groupBox3";
            this.groupBox3.Size = new System.Drawing.Size(840, 260);
            this.groupBox3.TabIndex = 18;
            this.groupBox3.TabStop = false;
            this.groupBox3.Text = "Activity Log";
            // 
            // label4
            // 
            this.label4.Font = new System.Drawing.Font("Segoe UI", 16F, System.Drawing.FontStyle.Bold);
            this.label4.Location = new System.Drawing.Point(20, 20);
            this.label4.Name = "label4";
            this.label4.Size = new System.Drawing.Size(840, 40);
            this.label4.TabIndex = 19;
            this.label4.Text = "Work Instruction Data Extractor";
            this.label4.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
            // 
            // Form1
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(880, 620);
            this.Controls.Add(this.label4);
            this.Controls.Add(this.groupBox3);
            this.Controls.Add(this.groupBox2);
            this.Controls.Add(this.groupBox1);
            this.MinimumSize = new System.Drawing.Size(800, 600);
            this.Name = "Form1";
            this.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
            this.Text = "Work Instruction Data Extractor";
            this.Load += new System.EventHandler(this.Form1_Load);
            this.groupBox1.ResumeLayout(false);
            this.groupBox1.PerformLayout();
            this.groupBox2.ResumeLayout(false);
            this.groupBox3.ResumeLayout(false);
            this.ResumeLayout(false);

        }

        #endregion

        private System.Windows.Forms.TextBox txtPowerPointPath;
        private System.Windows.Forms.TextBox txtOutputFolder;
        private System.Windows.Forms.Button btnSelectFile;
        private System.Windows.Forms.Button btnSelectFolder;
        private System.Windows.Forms.Button btnSelectOutputFolder;
        private System.Windows.Forms.Button btnExtract;
        private System.Windows.Forms.ProgressBar progressBar;
        private System.Windows.Forms.RichTextBox txtLog;
        private System.Windows.Forms.Label lblStatus;
        private System.Windows.Forms.Label label1;
        private System.Windows.Forms.Label label2;
        private System.Windows.Forms.Label label3;
        private System.Windows.Forms.GroupBox groupBox1;
        private System.Windows.Forms.RadioButton rbSingleFile;
        private System.Windows.Forms.RadioButton rbBulkFolder;
        private System.Windows.Forms.GroupBox groupBox2;
        private System.Windows.Forms.GroupBox groupBox3;
        private System.Windows.Forms.Label label4;
        private System.Windows.Forms.Label lblFileCount;
    }
}




