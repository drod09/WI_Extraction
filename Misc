private void SaveTrainingDataToCSV(string filePath)
{
    using (var writer = new StreamWriter(filePath))
    using (var csv = new CsvWriter(writer, CultureInfo.InvariantCulture))
    {
        // Configure CsvWriter to handle special characters properly
        csv.Context.TypeConverterOptionsCache.GetOptions<string>().NullValues.Add("");
        
        // Write comprehensive headers
        csv.WriteField("FileName");
        csv.WriteField("WI_Number");
        csv.WriteField("WI_Title");
        csv.WriteField("Revision");
        csv.WriteField("BOM_ASSY_DWG_NO");
        csv.WriteField("Operation_No");
        csv.WriteField("Product_Line");
        csv.WriteField("Subject");
        csv.WriteField("Page_No");
        csv.WriteField("Template_Rev");
        csv.WriteField("TextBoxText");
        csv.WriteField("Left");
        csv.WriteField("Top");
        csv.WriteField("Width");
        csv.WriteField("Height");
        csv.WriteField("TextLength");
        csv.WriteField("ContainsNumbers");
        csv.WriteField("ContainsHyphen");
        csv.WriteField("StartsWithWI");
        csv.WriteField("IsAllDigits");
        csv.WriteField("RevisionType");
        csv.WriteField("Label");
        csv.NextRecord();

        // Group labeled boxes by file
        var fileGroups = _allLabeledBoxes
            .Where(b => !string.IsNullOrEmpty(b.AssignedLabel) &&
                       !b.IsHidden &&
                       b.AssignedLabel != "Ignore")
            .GroupBy(b => b.SourceFile);

        foreach (var fileGroup in fileGroups)
        {
            // Find the file info for this group
            var fileInfo = _powerPointFiles.FirstOrDefault(f => f.FilePath == fileGroup.Key);

            string fileName = fileInfo?.FileName ?? System.IO.Path.GetFileName(fileGroup.Key);
            string wiNumber = fileInfo?.ExtractedWINumber ?? "";
            string wiTitle = fileInfo?.ExtractedTitle ?? "";
            string revision = fileInfo?.ExtractedRevision ?? "";
            string bom = fileInfo?.ExtractedBOM ?? "";
            string opNo = fileInfo?.ExtractedOperationNo ?? "";
            string productLine = fileInfo?.ExtractedProductLine ?? "";
            string subject = fileInfo?.ExtractedSubject ?? "";
            string pageNo = fileInfo?.ExtractedPageNo ?? "";
            string templateRev = fileInfo?.ExtractedTemplateRev ?? "";

            // Write each labeled text box with the file's extracted values
            foreach (var box in fileGroup)
            {
                // Clean text to remove problematic characters
                string cleanText = CleanTextForCSV(box.Text);
                
                csv.WriteField(fileName);
                csv.WriteField(wiNumber);
                csv.WriteField(wiTitle);
                csv.WriteField(revision);
                csv.WriteField(bom);
                csv.WriteField(opNo);
                csv.WriteField(productLine);
                csv.WriteField(subject);
                csv.WriteField(pageNo);
                csv.WriteField(templateRev);
                csv.WriteField(cleanText);  // Use cleaned text
                csv.WriteField(box.Left);
                csv.WriteField(box.Top);
                csv.WriteField(box.Width);
                csv.WriteField(box.Height);
                csv.WriteField(box.Text.Length);
                csv.WriteField(Regex.IsMatch(box.Text, @"\d") ? "true" : "false");  // Explicit true/false
                csv.WriteField(box.Text.Contains("-") ? "true" : "false");
                csv.WriteField(box.Text.StartsWith("WI", StringComparison.OrdinalIgnoreCase) ? "true" : "false");
                csv.WriteField(Regex.IsMatch(box.Text, @"^\d+$") ? "true" : "false");
                csv.WriteField(box.RevisionType);
                csv.WriteField(box.AssignedLabel);
                csv.NextRecord();
            }
        }
    }

    Console.WriteLine($"Combined training/verification CSV exported");
}

// ADD THIS NEW METHOD
private string CleanTextForCSV(string text)
{
    if (string.IsNullOrEmpty(text))
        return "";
    
    // Remove newlines and carriage returns
    text = text.Replace("\r", " ").Replace("\n", " ");
    
    // Replace tabs with spaces
    text = text.Replace("\t", " ");
    
    // Remove control characters
    text = new string(text.Where(c => !char.IsControl(c) || c == ' ').ToArray());
    
    // Collapse multiple spaces
    text = Regex.Replace(text, @"\s+", " ");
    
    return text.Trim();
}