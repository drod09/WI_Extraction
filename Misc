using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using UglyToad.PdfPig;
using UglyToad.PdfPig.DocumentLayoutAnalysis.TextExtractor;
using OfficeOpenXml;
using PdfPage = UglyToad.PdfPig.Content.Page;

namespace WorkInstructionExtractorPDF
{
public class PDFExtractor
{
public class ExtractionResult
{
public string ExcelPath { get; set; }
public string BaseImagesFolder { get; set; }
public string ComposedImagesFolder { get; set; }
public string WINumber { get; set; }
}

```
    public ExtractionResult ExtractFromPDF(string pdfPath, string outputFolder, Action<int, string> progressCallback)
    {
        progressCallback?.Invoke(0, "Starting PDF extraction...");

        string fileName = Path.GetFileNameWithoutExtension(pdfPath);
        string baseImagesFolder = Path.Combine(outputFolder, $"{fileName}_Images_Base");
        string composedImagesFolder = Path.Combine(outputFolder, $"{fileName}_Images_Composed");
        Directory.CreateDirectory(baseImagesFolder);
        Directory.CreateDirectory(composedImagesFolder);

        string excelPath = Path.Combine(outputFolder, "Extracted_Data.xlsx");

        progressCallback?.Invoke(10, "Opening PDF...");

        using (PdfDocument document = PdfDocument.Open(pdfPath))
        {
            var headerData = new Dictionary<string, string>();
            var tocData = new List<Dictionary<string, string>>();
            var imageData = new List<Dictionary<string, string>>();
            var textData = new List<Dictionary<string, string>>();

            progressCallback?.Invoke(20, "Extracting first page data...");

            // Extract from first page
            if (document.NumberOfPages > 0)
            {
                var firstPage = document.GetPage(1);
                headerData = ExtractHeaderData(firstPage, fileName, document.NumberOfPages);
            }

            string wiNumber = headerData.GetValueOrDefault("WI_Number", fileName);

            progressCallback?.Invoke(30, "Extracting images and text from all pages...");

            // Extract images and text from all pages
            for (int i = 1; i <= document.NumberOfPages; i++)
            {
                var page = document.GetPage(i);
                
                // Extract images
                ExtractImagesFromPage(page, i, baseImagesFolder, wiNumber, imageData);
                
                // Extract text content
                ExtractTextFromPage(page, i, wiNumber, fileName, textData);

                progressCallback?.Invoke(30 + (int)(40.0 * i / document.NumberOfPages),
                    $"Processing page {i} of {document.NumberOfPages}...");
            }

            progressCallback?.Invoke(75, "Building table of contents...");

            // Extract TOC from all pages
            for (int i = 1; i <= document.NumberOfPages; i++)
            {
                var page = document.GetPage(i);
                var subject = ExtractSubjectFromPage(page);

                tocData.Add(new Dictionary<string, string>
                {
                    ["DocumentID"] = "1",
                    ["WI_Number"] = wiNumber,
                    ["SourceFileName"] = fileName,
                    ["SlideNumber"] = i.ToString(),
                    ["SlideSubject"] = subject,
                    ["SlideTotal"] = document.NumberOfPages.ToString()
                });
            }

            progressCallback?.Invoke(90, "Writing to Excel...");

            WriteToExcel(headerData, tocData, imageData, textData, excelPath);

            progressCallback?.Invoke(100, "Extraction complete!");

            return new ExtractionResult
            {
                ExcelPath = excelPath,
                BaseImagesFolder = baseImagesFolder,
                ComposedImagesFolder = composedImagesFolder,
                WINumber = wiNumber
            };
        }
    }

    private Dictionary<string, string> ExtractHeaderData(PdfPage page, string fileName, int totalPages)
    {
        var data = new Dictionary<string, string>
        {
            ["DocumentID"] = "1",
            ["SourceFileName"] = fileName,
            ["TotalPages"] = totalPages.ToString()
        };

        var words = page.GetWords().ToList();
        double pageHeight = page.Height;

        // Extract all fields from first page
        foreach (var word in words)
        {
            string text = word.Text.Trim();
            double yFromTop = pageHeight - word.BoundingBox.Bottom;
            double xFromLeft = word.BoundingBox.Left;

            // WI Number: Look for pattern like "W.I. 0665" or "WI-0665"
            if (System.Text.RegularExpressions.Regex.IsMatch(text, @"^W\.?\s*I\.?\s*-?\s*\d+",
                System.Text.RegularExpressions.RegexOptions.IgnoreCase))
            {
                data["WI_Number"] = text;
            }

            // WI Title: Usually large text near top (Y < 150)
            if (yFromTop < 150 && xFromLeft > 100 && xFromLeft < 500 &&
                text.Length > 5 && text.Length < 80 &&
                !text.Contains("WORK INSTRUCTION") && !text.Contains("W.I."))
            {
                if (!data.ContainsKey("WI_Title"))
                {
                    var lineWords = words.Where(w =>
                        Math.Abs((pageHeight - w.BoundingBox.Bottom) - yFromTop) < 5 &&
                        w.BoundingBox.Left >= 100).OrderBy(w => w.BoundingBox.Left);
                    data["WI_Title"] = string.Join(" ", lineWords.Select(w => w.Text));
                }
            }

            // Revision: Look for "Rev" followed by number
            if (text.StartsWith("Rev", StringComparison.OrdinalIgnoreCase) && text.Length <= 15)
            {
                data["Revision"] = text;
                
                // Extract revision number for RevisionType
                var revMatch = System.Text.RegularExpressions.Regex.Match(text, @"(\d+)");
                if (revMatch.Success)
                {
                    int revNum = int.Parse(revMatch.Groups[1].Value);
                    if (revNum >= 15 && revNum <= 16)
                        data["RevisionType"] = "15-16";
                    else if (revNum >= 17 && revNum <= 19)
                        data["RevisionType"] = "17-19";
                }
            }

            // BOM/ASSY DWG NO: Look for patterns with numbers and dashes
            if (System.Text.RegularExpressions.Regex.IsMatch(text, @"^\d{3,}-\d+") &&
                !data.ContainsKey("BOM_ASSY_DWG_NO"))
            {
                data["BOM_ASSY_DWG_NO"] = text;
            }

            // Operation No: Look for "OP" followed by numbers
            if (System.Text.RegularExpressions.Regex.IsMatch(text, @"^OP\s*\d+",
                System.Text.RegularExpressions.RegexOptions.IgnoreCase) &&
                !data.ContainsKey("Operation_No"))
            {
                data["Operation_No"] = text;
            }

            // Product Line: Middle section, specific position
            if (yFromTop > 200 && yFromTop < 350 && xFromLeft > 100 && xFromLeft < 300 &&
                text.Length > 2 && text.Length < 30 &&
                !IsLabelText(text) && !data.ContainsKey("Product_Line"))
            {
                data["Product_Line"] = text;
            }

            // Subject: Bottom of page
            if (yFromTop >= 483 && yFromTop <= 518 &&
                xFromLeft >= 288 && xFromLeft <= 360 &&
                text.Length > 2 && text.Length < 100 &&
                !IsLabelText(text))
            {
                if (!data.ContainsKey("Subject"))
                {
                    var lineWords = words.Where(w =>
                        Math.Abs((pageHeight - w.BoundingBox.Bottom) - yFromTop) < 5 &&
                        w.BoundingBox.Left >= 288).OrderBy(w => w.BoundingBox.Left);
                    data["Subject"] = string.Join(" ", lineWords.Select(w => w.Text));
                }
            }
        }

        // Fallback for WI_Number
        if (!data.ContainsKey("WI_Number") || string.IsNullOrEmpty(data["WI_Number"]))
        {
            data["WI_Number"] = fileName;
        }

        // Default values for missing fields
        if (!data.ContainsKey("WI_Title")) data["WI_Title"] = "";
        if (!data.ContainsKey("Revision")) data["Revision"] = "";
        if (!data.ContainsKey("BOM_ASSY_DWG_NO")) data["BOM_ASSY_DWG_NO"] = "";
        if (!data.ContainsKey("Operation_No")) data["Operation_No"] = "";
        if (!data.ContainsKey("Product_Line")) data["Product_Line"] = "";
        if (!data.ContainsKey("Subject")) data["Subject"] = "";
        if (!data.ContainsKey("RevisionType")) data["RevisionType"] = "";

        return data;
    }

    private string ExtractSubjectFromPage(PdfPage page)
    {
        var words = page.GetWords().ToList();
        double pageHeight = page.Height;

        // Look for subject at bottom of page
        foreach (var word in words)
        {
            string text = word.Text.Trim();
            double yFromTop = pageHeight - word.BoundingBox.Bottom;
            double xFromLeft = word.BoundingBox.Left;

            // Subject position: Y: 483-518 pts from top, X: 288-360 pts from left
            if (yFromTop >= 483 && yFromTop <= 518 &&
                xFromLeft >= 288 && xFromLeft <= 360 &&
                text.Length > 2 && text.Length < 100 &&
                !IsLabelText(text))
            {
                // Get full line of text
                var lineWords = words.Where(w =>
                    Math.Abs((pageHeight - w.BoundingBox.Bottom) - yFromTop) < 5 &&
                    w.BoundingBox.Left >= 288).OrderBy(w => w.BoundingBox.Left);

                string subject = string.Join(" ", lineWords.Select(w => w.Text));
                if (!IsLabelText(subject))
                {
                    return subject.ToUpper();
                }
            }
        }

        return "UNTITLED SLIDE";
    }

    private void ExtractTextFromPage(PdfPage page, int pageNumber, string wiNumber,
        string fileName, List<Dictionary<string, string>> textData)
    {
        var words = page.GetWords().ToList();
        double pageHeight = page.Height;

        // Group words into text blocks by proximity
        var textBlocks = new List<string>();
        var currentBlock = new List<string>();
        double lastY = -1;

        foreach (var word in words.OrderBy(w => pageHeight - w.BoundingBox.Bottom).ThenBy(w => w.BoundingBox.Left))
        {
            double currentY = pageHeight - word.BoundingBox.Bottom;

            // If Y position jumped significantly, start new block
            if (lastY >= 0 && Math.Abs(currentY - lastY) > 15)
            {
                if (currentBlock.Count > 0)
                {
                    textBlocks.Add(string.Join(" ", currentBlock));
                    currentBlock.Clear();
                }
            }

            currentBlock.Add(word.Text);
            lastY = currentY;
        }

        // Add last block
        if (currentBlock.Count > 0)
        {
            textBlocks.Add(string.Join(" ", currentBlock));
        }

        // Get subject for this page
        string pageSubject = ExtractSubjectFromPage(page);

        // Add text blocks to data
        int textBoxNumber = 1;
        foreach (var block in textBlocks)
        {
            if (block.Length > 3 && !IsLabelText(block))
            {
                textData.Add(new Dictionary<string, string>
                {
                    ["DocumentID"] = "1",
                    ["WI_Number"] = wiNumber,
                    ["SourceFileName"] = fileName,
                    ["SlideNumber"] = pageNumber.ToString(),
                    ["SlideSubject"] = pageSubject,
                    ["TextBoxNumber"] = textBoxNumber.ToString(),
                    ["TextContent"] = block
                });
                textBoxNumber++;
            }
        }
    }

    private bool IsLabelText(string text)
    {
        string upper = text.ToUpper();
        return upper == "SUBJECT" || upper == "SUBJECT:" ||
               upper.Contains("COMPANY") || upper.Contains("WORK INSTRUCTION") ||
               upper.Contains("W.I. NUMBER") || upper.Contains("BOM") ||
               upper.Contains("OPERATION NO") || upper == "PRODUCT LINE" ||
               upper == "PAGE" || upper == "REV" ||
               upper.Contains("FM-ME") || upper.Contains("REVISION HISTORY") ||
               upper.Contains("SUBJECT OF SLIDE") ||
               System.Text.RegularExpressions.Regex.IsMatch(text, @"^\s*\d+\s+OF\s+\d+\s*$",
                   System.Text.RegularExpressions.RegexOptions.IgnoreCase);
    }

    private void ExtractImagesFromPage(PdfPage page, int pageNumber, string imagesFolder,
        string wiNumber, List<Dictionary<string, string>> imageData)
    {
        var images = page.GetImages().ToList();
        int imageCounter = 1;

        foreach (var image in images)
        {
            try
            {
                var rawBytes = image.RawBytes;
                if (rawBytes != null && rawBytes.Count > 0)
                {
                    string imageName = $"{wiNumber}_Slide{pageNumber}_Img{imageCounter}.png";
                    string imagePath = Path.Combine(imagesFolder, imageName);

                    // Save image
                    var bytes = rawBytes.ToArray();
                    File.WriteAllBytes(imagePath, bytes);

                    imageData.Add(new Dictionary<string, string>
                    {
                        ["DocumentID"] = "1",
                        ["WI_Number"] = wiNumber,
                        ["SourceFileName"] = Path.GetFileName(imagePath),
                        ["SlideNumber"] = pageNumber.ToString(),
                        ["ImageNumber"] = imageCounter.ToString(),
                        ["ImageType"] = "Base",
                        ["ImageFileName"] = imageName,
                        ["ImagePath"] = imagePath,
                        ["IsGrouped"] = "False",
                        ["Width"] = image.Bounds.Width.ToString("F2"),
                        ["Height"] = image.Bounds.Height.ToString("F2")
                    });

                    imageCounter++;
                }
            }
            catch
            {
                // Skip images that can't be extracted
            }
        }
    }

    private void WriteToExcel(Dictionary<string, string> headerData,
        List<Dictionary<string, string>> tocData,
        List<Dictionary<string, string>> imageData,
        List<Dictionary<string, string>> textData,
        string excelPath)
    {
        ExcelPackage.LicenseContext = LicenseContext.NonCommercial;

        using (var package = new ExcelPackage())
        {
            // Header Data Sheet
            var headerSheet = package.Workbook.Worksheets.Add("Header Data");
            var headers = new string[] {
                "Document ID", "Source File Name", "WI Number", "WI Title", "Revision",
                "BOM/ASSY DWG NO", "Operation No", "Product Line", "Subject", "Revision Type",
                "Total Pages", "Total Images"
            };

            for (int i = 0; i < headers.Length; i++)
            {
                headerSheet.Cells[1, i + 1].Value = headers[i];
            }

            using (var range = headerSheet.Cells[1, 1, 1, headers.Length])
            {
                range.Style.Font.Bold = true;
                range.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
                range.Style.Fill.BackgroundColor.SetColor(System.Drawing.Color.LightGray);
            }

            headerSheet.Cells[2, 1].Value = headerData.GetValueOrDefault("DocumentID", "1");
            headerSheet.Cells[2, 2].Value = headerData.GetValueOrDefault("SourceFileName", "");
            headerSheet.Cells[2, 3].Value = headerData.GetValueOrDefault("WI_Number", "");
            headerSheet.Cells[2, 4].Value = headerData.GetValueOrDefault("WI_Title", "");
            headerSheet.Cells[2, 5].Value = headerData.GetValueOrDefault("Revision", "");
            headerSheet.Cells[2, 6].Value = headerData.GetValueOrDefault("BOM_ASSY_DWG_NO", "");
            headerSheet.Cells[2, 7].Value = headerData.GetValueOrDefault("Operation_No", "");
            headerSheet.Cells[2, 8].Value = headerData.GetValueOrDefault("Product_Line", "");
            headerSheet.Cells[2, 9].Value = headerData.GetValueOrDefault("Subject", "");
            headerSheet.Cells[2, 10].Value = headerData.GetValueOrDefault("RevisionType", "");
            headerSheet.Cells[2, 11].Value = headerData.GetValueOrDefault("TotalPages", "");
            headerSheet.Cells[2, 12].Value = imageData.Count.ToString();

            headerSheet.Cells.AutoFitColumns();

            // Images Sheet
            if (imageData.Count > 0)
            {
                var imgSheet = package.Workbook.Worksheets.Add("Images");
                var imgHeaders = new string[] {
                    "Document ID", "WI Number", "Source File Name", "Slide Number", "Image Number",
                    "Image Type", "Image File Name", "Image Path", "Is Grouped", "Width", "Height"
                };

                for (int i = 0; i < imgHeaders.Length; i++)
                {
                    imgSheet.Cells[1, i + 1].Value = imgHeaders[i];
                }

                using (var range = imgSheet.Cells[1, 1, 1, imgHeaders.Length])
                {
                    range.Style.Font.Bold = true;
                    range.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
                    range.Style.Fill.BackgroundColor.SetColor(System.Drawing.Color.LightGray);
                }

                int row = 2;
                foreach (var img in imageData)
                {
                    imgSheet.Cells[row, 1].Value = img.GetValueOrDefault("DocumentID", "");
                    imgSheet.Cells[row, 2].Value = img.GetValueOrDefault("WI_Number", "");
                    imgSheet.Cells[row, 3].Value = img.GetValueOrDefault("SourceFileName", "");
                    imgSheet.Cells[row, 4].Value = img.GetValueOrDefault("SlideNumber", "");
                    imgSheet.Cells[row, 5].Value = img.GetValueOrDefault("ImageNumber", "");
                    imgSheet.Cells[row, 6].Value = img.GetValueOrDefault("ImageType", "");
                    imgSheet.Cells[row, 7].Value = img.GetValueOrDefault("ImageFileName", "");
                    imgSheet.Cells[row, 8].Value = img.GetValueOrDefault("ImagePath", "");
                    imgSheet.Cells[row, 9].Value = img.GetValueOrDefault("IsGrouped", "");
                    imgSheet.Cells[row, 10].Value = img.GetValueOrDefault("Width", "");
                    imgSheet.Cells[row, 11].Value = img.GetValueOrDefault("Height", "");
                    row++;
                }

                imgSheet.Cells.AutoFitColumns();
            }

            // Table of Contents Sheet
            if (tocData.Count > 0)
            {
                var tocSheet = package.Workbook.Worksheets.Add("Table of Contents");
                var tocHeaders = new string[] {
                    "Document ID", "WI Number", "Source File Name", "Slide Number",
                    "Slide Subject", "Slide Total"
                };

                for (int i = 0; i < tocHeaders.Length; i++)
                {
                    tocSheet.Cells[1, i + 1].Value = tocHeaders[i];
                }

                using (var range = tocSheet.Cells[1, 1, 1, tocHeaders.Length])
                {
                    range.Style.Font.Bold = true;
                    range.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
                    range.Style.Fill.BackgroundColor.SetColor(System.Drawing.Color.LightGray);
                }

                int row = 2;
                foreach (var toc in tocData)
                {
                    tocSheet.Cells[row, 1].Value = toc.GetValueOrDefault("DocumentID", "");
                    tocSheet.Cells[row, 2].Value = toc.GetValueOrDefault("WI_Number", "");
                    tocSheet.Cells[row, 3].Value = toc.GetValueOrDefault("SourceFileName", "");
                    tocSheet.Cells[row, 4].Value = toc.GetValueOrDefault("SlideNumber", "");
                    tocSheet.Cells[row, 5].Value = toc.GetValueOrDefault("SlideSubject", "");
                    tocSheet.Cells[row, 6].Value = toc.GetValueOrDefault("SlideTotal", "");
                    row++;
                }

                tocSheet.Cells.AutoFitColumns();
            }

            // Text Content Sheet
            if (textData.Count > 0)
            {
                var textSheet = package.Workbook.Worksheets.Add("Text Content");
                var textHeaders = new string[] {
                    "Document ID", "WI Number", "Source File Name", "Slide Number",
                    "Slide Subject", "TextBox Number", "Text Content"
                };

                for (int i = 0; i < textHeaders.Length; i++)
                {
                    textSheet.Cells[1, i + 1].Value = textHeaders[i];
                }

                using (var range = textSheet.Cells[1, 1, 1, textHeaders.Length])
                {
                    range.Style.Font.Bold = true;
                    range.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
                    range.Style.Fill.BackgroundColor.SetColor(System.Drawing.Color.LightGray);
                }

                int row = 2;
                foreach (var txt in textData)
                {
                    textSheet.Cells[row, 1].Value = txt.GetValueOrDefault("DocumentID", "");
                    textSheet.Cells[row, 2].Value = txt.GetValueOrDefault("WI_Number", "");
                    textSheet.Cells[row, 3].Value = txt.GetValueOrDefault("SourceFileName", "");
                    textSheet.Cells[row, 4].Value = txt.GetValueOrDefault("SlideNumber", "");
                    textSheet.Cells[row, 5].Value = txt.GetValueOrDefault("SlideSubject", "");
                    textSheet.Cells[row, 6].Value = txt.GetValueOrDefault("TextBoxNumber", "");
                    textSheet.Cells[row, 7].Value = txt.GetValueOrDefault("TextContent", "");
                    row++;
                }

                textSheet.Cells.AutoFitColumns();
            }

            package.SaveAs(new FileInfo(excelPath));
        }
    }
}
```

}